{"version":3,"file":"static/js/149.c9543b3a.chunk.js","mappings":"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","sources":["pages/revisionFloat/dataHelpers.js","pages/revisionFloat/revisionFloatToolbarNativeCta.jsx","utils/getUserEmail.js","pages/revisionFloat/revisionFloat.jsx","index.js"],"sourcesContent":["// pages/revisionFloat/dataHelpers.js\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faXmark } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CheckmarkCell = () => (\r\n  <FontAwesomeIcon icon={faCheck} className=\"green-icon\" />\r\n);\r\n\r\nconst CrossmarkCell = () => (\r\n  <FontAwesomeIcon icon={faXmark} className=\"cross-icon\" />\r\n);\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (droppedObjectData) => {\r\n  if (\r\n    !droppedObjectData ||\r\n    !droppedObjectData.parentDetails ||\r\n    !droppedObjectData.parentDetails.data\r\n  ) {\r\n    return [];\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n  const parents = droppedObjectData.parentDetails.data;\r\n\r\n  return parents.map((parent) => {\r\n    let rowData = {\r\n      EIN: parent.EIN || \"N/A\",\r\n      Title: parent.Title || \"N/A\",\r\n      Description: parent.Description || \"N/A\",\r\n      Type: parent.Type || \"N/A\",\r\n      Revision: parent[\"Dropped Revision\"] || \"N/A\",\r\n      \"Dropped Revision ID\": parent[\"Dropped Revision ID\"] || \"N/A\",\r\n      \"Connected Child Revision\": parent.connectedChildRev || \"N/A\",\r\n      \"Latest child connected\": parent.toBeChildRevConnected ? false : true,\r\n      \"To-Be child connected\": parent.toBeChildRevConnected || \"-\",\r\n      State: parent[\"Maturity State\"] || \"N/A\",\r\n      Owner: parent.Owner || \"N/A\",\r\n      \"CAD Format\": parent[\"CAD Format\"] || \"N/A\",\r\n      Collabspace: parent[\"Collaborative Space Title\"] || \"N/A\",\r\n    };\r\n    // Add relationship field if the type is Document\r\n    if (item.Type === \"Document\") {\r\n      rowData[\"relationship\"] = parent.relationship || \"N/A\";\r\n    }\r\n\r\n    return rowData;\r\n  });\r\n};\r\n\r\nexport const tableColumns = [\r\n  {\r\n    accessorKey: \"EIN\",\r\n    header: \"EIN\",\r\n    columnPinning: true,\r\n  },\r\n  { accessorKey: \"Title\", header: \"Title\" },\r\n  { accessorKey: \"Description\", header: \"Description\" },\r\n  { accessorKey: \"Type\", header: \"Type\" },\r\n  { accessorKey: \"Revision\", header: \"Revision\" },\r\n  {\r\n    accessorKey: \"Connected Child Revision\",\r\n    header: \"Connected Revision\",\r\n  },\r\n  {\r\n    accessorKey: \"Latest child connected\",\r\n    header: \"latest Revision Connected\",\r\n    cell: ({ cell }) => {\r\n      const value = cell.getValue();\r\n      // Render a checkmark if true, a cross if false\r\n      return value ? <CheckmarkCell /> : <CrossmarkCell />;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: \"To-Be child connected\",\r\n    header: \"Revision to-be Connected\",\r\n  },\r\n  {\r\n    accessorKey: \"relationship\",\r\n    header: \"Relationship\",\r\n  },\r\n  { accessorKey: \"State\", header: \"State\" },\r\n  { accessorKey: \"Owner\", header: \"Owner\" },\r\n  { accessorKey: \"CAD Format\", header: \"CAD Format\" },\r\n  { accessorKey: \"Collabspace\", header: \"Collabspace\" },\r\n];\r\n","import React from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useRevisions from \"../../hooks/useRevisions\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_NO_ROWS, MSG_NO_REPLACE } from \"../../utils/toastMessages\";\r\nimport getUserEmail from \"../../utils/getUserEmail\";\r\nimport WidgetLifecycle from \"../../WidgetLifecycle\";\r\n\r\nconst RevisionFloatToolbarNativeCta = () => {\r\n  const { replaceRevisions } = useRevisions();\r\n  const { showErrorToast } = useToast();\r\n  // Access relevant data from Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  ); // Assuming you're storing selected rows in Redux\r\n\r\n  // console.log(\"selectedTableRows\", selectedTableRows);\r\n\r\n  const handleReplace = async () => {\r\n    if (!selectedTableRows || selectedTableRows.length === 0) {\r\n      showErrorToast(MSG_NO_ROWS);\r\n      return;\r\n    }\r\n\r\n    // Get the parentDetails from droppedObjectData\r\n    const allParents = droppedObjectData.parentDetails?.data;\r\n    if (!allParents || allParents.length === 0) {\r\n      showErrorToast(\"No parent details available.\");\r\n      return;\r\n    }\r\n\r\n    // Filter selected rows where 'To-Be child connected' is not \"-\"\r\n    const selectedRows = selectedTableRows.filter(\r\n      (row) => row[\"To-Be child connected\"] !== \"-\"\r\n    );\r\n\r\n    if (selectedRows.length === 0) {\r\n      showErrorToast(MSG_NO_REPLACE);\r\n      return;\r\n    }\r\n\r\n    // Map selectedRows to their corresponding parent objects\r\n    const selectedParents = selectedRows.map((row) => {\r\n      return allParents.find(\r\n        (parent) => parent[\"Dropped Revision ID\"] === row[\"Dropped Revision ID\"]\r\n      );\r\n    });\r\n\r\n    // Check if any matching parent is not found\r\n    if (selectedParents.some((parent) => !parent)) {\r\n      showErrorToast(\"Could not find all corresponding parent details.\");\r\n      return;\r\n    }\r\n\r\n    const userEmail = await getUserEmail();\r\n    if (!userEmail) {\r\n      throw new Error(\"User email not found.\");\r\n    }\r\n\r\n    const droppedData = droppedObjectData.cardData;\r\n\r\n    // Call the replaceRevisions function from useRevisions hook\r\n    const result = await replaceRevisions(\r\n      selectedParents,\r\n      droppedData,\r\n      userEmail\r\n    );\r\n    \r\n\r\n    if (result.success) {\r\n      // Handle success (e.g., show a success message, refetch data, etc.)\r\n    } else {\r\n      // Handle error (e.g., show an error message)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex cta-absolute\">\r\n      <CustomButton\r\n        variant=\"outline-secondary\"\r\n        className=\"m-2\"\r\n        size=\"lg\"\r\n        text=\"Replace\"\r\n        onClick={handleReplace}\r\n      />\r\n      <WidgetLifecycle />\r\n      \r\n\r\n      {/* <CustomButton\r\n        variant=\"outline-secondary\"\r\n        className=\"m-2\"\r\n        size=\"lg\"\r\n        text=\" Select items in my Collaborative Space\"\r\n        // onClick={\"\"}\r\n      /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RevisionFloatToolbarNativeCta;\r\n","// utils/getUserEmail.js\r\nimport { loadPlatformAPI } from \"./helpers\"; \r\n\r\nexport default async function getUserEmail() {\r\n  try {\r\n    const PlatformAPI = await loadPlatformAPI();\r\n    const user = await PlatformAPI.getUser();\r\n\r\n    return user.email;\r\n  } catch (error) {\r\n    console.error(\"Error getting user email:\", error);\r\n    return null; // Or throw the error, depending on how you want to handle it\r\n  }\r\n}","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport { getCardData, getTableData, tableColumns } from \"./dataHelpers\";\r\n// import useToast from \"../../hooks/useToast\";\r\nimport RevisionFloatToolbarNativeCta from \"./revisionFloatToolbarNativeCta\";\r\n\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\n\r\nconst RevisionFloat = () => {\r\n  const { initializeDroppableArea, loading } = useDroppableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n\r\n  // const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const dispatch = useDispatch();\r\n  // const { showSuccessToast } = useToast();\r\n\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(\r\n    () => getTableData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length > 0) {\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    } else {\r\n      setTableData([]); // Clear table data if newTableData is empty\r\n    }\r\n  }, [newTableData]);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   setIsCardDataAvailable(!!cardData);\r\n  // }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  // const columns = useMemo(() => tableColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        draggedData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    setTableData([]); // Clear local table data\r\n    // setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n\r\n  // Filter columns based on dropped object type\r\n  const filteredColumns = useMemo(() => {\r\n    if (\r\n      droppedObjectData &&\r\n      droppedObjectData.draggedData &&\r\n      droppedObjectData.draggedData.Type === \"Document\"\r\n    ) {\r\n      return tableColumns; // Show all columns for Document type\r\n    } else {\r\n      return tableColumns.filter(\r\n        (column) => column.accessorKey !== \"relationship\"\r\n      ); // Hide relationship column for other types\r\n    }\r\n  }, [droppedObjectData]);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"[RevisionFloat] State Changes:\", {\r\n  //     loading,\r\n  //     loadingParentDetails,\r\n  //     isDropped,\r\n  //   });\r\n  // }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  // console.log(\"isCardDataAvailable\", isCardDataAvailable);\r\n\r\n  return (\r\n    <>\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n\r\n      {/* Show initial loader when loading is true */}\r\n      {loading && <Loader />}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\"p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && <CardWithDragAndDrop data={cardData} />}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : tableData.length > 0 ? (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <RevisionFloatToolbarNativeCta />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={filteredColumns}\r\n                  widgetType=\"Revision_FLoat_Widget\" // pass the Widget type aa Props\r\n                />\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <div className=\"no-data-banner\"> No Parent object(s) found</div>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RevisionFloat;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport RevisionFloat from \"./pages/revisionFloat/revisionFloat\";\r\nimport { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\n\r\n\r\n// Connect to the WebSocket server\r\nconst socket = io(\"http://localhost:9090\");\r\n\r\nsocket.on(\"connect\", () => {\r\n  console.log(\"Connected to Dev Server ✅\");\r\n});\r\n\r\nsocket.on(\"filech\", () => {\r\n  console.log(\"File Changed. Reloading...\");\r\n  window.location.reload();\r\n});\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") || document.getElementById(\"root\");\r\n  \r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    console.log(\"[index.js] Root element found.\");\r\n  }\r\n  \r\n  if (!root) {\r\n    console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n    <RevisionFloat />\r\n    <ToastContainer />\r\n  </Provider>\r\n  );\r\n  console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n\r\nexport default function () {\r\n  // When the widget fires the onLoad event, mount the React app.\r\n  window.widget.addEvent(\"onLoad\", () => {\r\n    start();\r\n  });\r\n\r\n  // When the widget fires the onRefresh event, reload the page.\r\n  window.widget.addEvent(\"onRefresh\", () => {\r\n    console.log(\"[index.js] onRefresh event fired. Reloading page.\");\r\n    window.location.reload();\r\n  });\r\n\r\n  // Log a message when the widget's preferences have been edited.\r\n  window.widget.addEvent(\"endEdit\", () => {\r\n    console.log(\"Preferences have been edited\");\r\n  });\r\n}\r\n\r\n"],"names":["CheckmarkCell","_jsx","FontAwesomeIcon","icon","faCheck","className","CrossmarkCell","faXmark","tableColumns","accessorKey","header","columnPinning","cell","_ref","getValue","RevisionFloatToolbarNativeCta","replaceRevisions","useRevisions","showErrorToast","useToast","droppedObjectData","useSelector","state","droppedObject","selectedTableRows","_jsxs","children","CustomButton","variant","size","text","onClick","async","_droppedObjectData$pa","length","MSG_NO_ROWS","allParents","parentDetails","data","selectedRows","filter","row","MSG_NO_REPLACE","selectedParents","map","find","parent","some","userEmail","PlatformAPI","loadPlatformAPI","getUser","email","error","console","getUserEmail","Error","droppedData","cardData","success","WidgetLifecycle","RevisionFloat","initializeDroppableArea","loading","useDroppableArea","tableKey","setTableKey","useState","tableData","setTableData","isTableLoading","setIsTableLoading","dispatch","useDispatch","log","loadingParentDetails","isDropped","useEffect","newTableData","useMemo","item","rowData","EIN","Title","Description","Type","Revision","connectedChildRev","toBeChildRevConnected","State","Owner","Collabspace","relationship","getTableData","prevKey","title","type","owner","imageURL","getCardData","filteredColumns","draggedData","column","_Fragment","DragAndDropComponent","Loader","Image","src","alt","handleHomeClick","setIsDropped","setDroppedObjectData","versions","initialDraggedData","CardWithDragAndDrop","ReusableTable","columns","widgetType","socket","io","on","window","location","reload","root","widget","addEvent","_window$widget","_window$widget$body","requirejs","rootElement","body","querySelector","document","getElementById","createElement","id","appendChild","ReactDOM","render","Provider","store","ToastContainer","start"],"sourceRoot":""}