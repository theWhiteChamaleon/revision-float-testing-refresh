{"version":3,"file":"static/js/530.7bc3d7d6.chunk.js","mappings":"4UAQA,MA2CA,EA3CwBA,KAEtB,MAAM,WAAEC,IAAeC,EAAAA,EAAAA,MACjB,iBAAEC,EAAgB,eAAEC,IAAmBC,EAAAA,EAAAA,KACvCC,GAAqBC,EAAAA,EAAAA,KAAaC,GAC/BA,EAAMC,cAAcC,kBAAkBJ,qBAwB/C,OACEK,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UAEEF,EAAAA,EAAAA,KAACG,EAAAA,EAAY,CACXC,QAAQ,oBACRC,UAAU,MACVC,KAAK,KACLC,KAAK,UACLC,QA7BcC,UAClB,GACEd,GACAA,EAAmBe,KAAKC,MAAM,GAAGC,UACjCjB,EAAmBe,KAAKC,MAAM,GAAGE,YACX,oBAAfvB,EAEP,IACE,MAAMwB,EAAYnB,EAAmBe,KAAKC,WCxBjBF,OAAOK,EAAWxB,KAEjD,GADAyB,QAAQC,IAAI,6CAA8CF,GACrDA,GAAkC,IAArBA,EAAUG,OAI5B,IACE,GAA0B,oBAAf3B,EACT,MAAM,IAAI4B,MAAM,iDAEZ5B,EAAWwB,EACnB,CAAE,MAAOK,GACPJ,QAAQI,MAAM,+CAAgDA,EAChE,MAVEJ,QAAQK,KAAK,kDAUf,EDYYC,CAAkBP,EAAWxB,GACnCE,EAAiB8B,EAAAA,GACnB,CAAE,MAAOH,GACPJ,QAAQI,MAAM,wBAAyBA,GACvC1B,EAAe8B,EAAAA,GACjB,MAEAR,QAAQI,MAAM,8CAChB,KAcG,E,mFE7CA,MAuDMK,EAAe,CAC1B,CAAEC,YAAa,QAASC,OAAQ,SAChC,CAAED,YAAa,MAAOC,OAAQ,OAC9B,CACED,YAAa,OACbC,OAAQ,OACRC,KAAMC,IAA+B,IAA9B,IAAEC,EAAG,SAAEC,EAAQ,MAAEC,GAAOH,EAc7B,OACEI,EAAAA,EAAAA,MAAA,UACEC,MAAOH,IACPI,SAhB0BC,IAAO,IAADC,EAClC,MAAMC,EAAeF,EAAEG,OAAOL,MAGxBM,EAAcR,EACjBS,cACAC,KAAKC,KAAKC,GACTA,EAAEC,KAAOf,EAAIe,IAAEC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQF,EAAEG,UAAQ,IAAEC,KAAMV,IAAiBM,EAAEG,WAG9C,QAAlBV,EAAAL,EAAMiB,QAAQC,YAAI,IAAAb,GAAlBA,EAAoBc,gBAAgBX,EAAY,EAO9ClC,UAAU,+EACV8C,MAAO,CACLC,WAAY,OACZC,MAAO,MACPC,QAAS,MACTC,SAAU,OACVC,MAAO,OACPC,WAAY,OACZC,OAAQ,OACRC,UAAW,QAEbC,YAAczB,GAAOA,EAAEG,OAAOa,MAAMO,OAAS,iBAC7CG,WAAa1B,GAAOA,EAAEG,OAAOa,MAAMO,OAAS,OAAQxD,SAAA,EAEpDF,EAAAA,EAAAA,KAAA,UAAQiC,MAAM,OAAM/B,SAAC,UACrBF,EAAAA,EAAAA,KAAA,UAAQiC,MAAM,MAAK/B,SAAC,UACb,GAIf,CAAEuB,YAAa,SAAUC,OAAQ,UACjC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,SAAUC,OAAQ,UACjC,CAAED,YAAa,gBAAiBC,OAAQ,iBACxC,CAAED,YAAa,kBAAmBC,OAAQ,mBAC1C,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,cACrC,CAAED,YAAa,aAAcC,OAAQ,cAErC,CAAED,YAAa,aAAcC,OAAQ,eAG1BoC,EAAgB,CAC3B,CAAErC,YAAa,kBAAmBC,OAAQ,oB,cCjHrC,MCAMqC,EAAWtD,MAAOuD,EAAYC,KACzC,IAAIC,EAAY,CAAEC,MAAO,IACzBpD,QAAQC,IAAI,iCAEZ,IAAK,IAADoD,EACF,MAAMC,QAAgBC,EAAAA,EAAAA,MAEhBC,EAAY9D,SACT,IAAI+D,SAAQ,CAACC,EAASC,KAC3BL,EAAQM,qBAAqBC,EAAK,CAChCC,OAAQ,MACRZ,UACAa,KAAM,OACNC,WAAaC,IACXjE,QAAQC,IAAI,qBAAsBgE,GAElCP,EAAQO,EAAS,EAEnBC,UAAY9D,IACVJ,QAAQI,MAAM,kBAAmBA,GACjCuD,EAAOvD,EAAM,GAEf,IAKN,IAAI+D,EAAS,2HAAAC,OAA8HnB,GAC3I,MACMoB,EAAqC,QAAjChB,SADmBG,EAAUW,IACXG,aAAa,UAAE,IAAAjB,OAAA,EAA9BA,EAAgCkB,WAI7C,GAFAvE,QAAQC,IAAI,yBAA0BoE,GAElCA,EAAM,CAER,MAAMG,EAAK,oGAAAJ,OAAuGC,EAAI,qCAChHI,QAAmBjB,EAAUgB,GAInC,GAFAxE,QAAQC,IAAI,yBAA0BwE,GAElCA,EAAY,CAEd,IAAK,MAAMC,KAAQD,EAAWE,cAAgB,GAC5C,GAAkB,kBAAdD,EAAKX,KAA0B,CACjC,MAAMa,EAAW,oGAAAR,OAAuGM,EAAKH,WAAU,qCAEvI,IAEE,MAAMM,QAAyBrB,EAAUoB,GAEzC5E,QAAQC,IAAI,yBAA0B4E,GAElCA,GACF1B,EAAUC,MAAM0B,KAAK,CACnBC,QAASF,EAAiBG,MAC1BC,QAASJ,EAAiB/F,OAGhC,CAAE,MAAOsB,GACPJ,QAAQI,MAAM,iCAAkCA,EAClD,CACF,CAGF+C,EAAoB,SAAIsB,EAAW3F,MACnCqE,EAAoB,SAAIsB,EAAWO,KACrC,CACF,CAGA,OADAhF,QAAQC,IAAI,mBAAoBkD,GACzBA,CACT,CAAE,MAAO/C,GAEP,MADAJ,QAAQI,MAAM,qBAAsBA,GAC9BA,CACR,GCgEF,EAtH2B8E,KACzB,MAAM,eAAExG,IAAmBC,EAAAA,EAAAA,KAErBwG,GAAWC,EAAAA,EAAAA,MACjB,IAAIC,EAAQ,GACRC,EAAmB,IACvBC,EAAAA,EAAAA,IAAYC,IACVF,EAAmBE,EAAOzE,SAAS,eACnCsE,EAAQG,EAAOzE,SAAS,QAAQ,IAGlCf,QAAQC,IAAI,+BAAgCoF,GAC5CrF,QAAQC,IAAI,0CAA2CqF,GAuGvD,MAAO,CAAEG,sBAnGqB/F,MAAOgG,EAAa5G,EAAOe,EAAUkE,KACjE,IACEoB,GAASQ,EAAAA,EAAAA,KAAwB,IACjC,MAAMzC,OCvCkBxD,WAC5B,IACE,MAAM4D,QAAgBC,EAAAA,EAAAA,MACtBvD,QAAQC,IAAI,uBAAwBqF,GACpC,MAAMM,EAAUC,6GAEV5B,QAAiB,IAAIR,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqBgC,EAAS,CACpC9B,OAAQ,MACRC,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAGEmC,EAAY7B,EAAS8B,KAAKC,KAC1BC,EAAYhC,EAAS8B,KAAK7E,MAC1BgF,EAAwB,kBACxBC,EAAuBb,EAM7B,MAJgB,CACd,CAACQ,GAAYG,EACb,CAACC,GAAwBC,EAG7B,CAAE,MAAO/F,GAEP,YADAJ,QAAQI,MAAM,gCAAiCA,EAEjD,GDW0BgG,CAAed,GAErC,GAAIpC,EAAS,CACXlD,QAAQC,IAAI,mCAAoCiD,GAChD,MAAMmD,OF3CoB3G,OAAOwD,EAASrD,EAAUwF,KAC1D,IACErF,QAAQC,IAAI,iCAAkCJ,GAC9C,MAAMyD,QAAgBC,EAAAA,EAAAA,MACtB,IAAIY,EACF,yGACF,MAAMF,QAAiB,IAAIR,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqBO,EAAW,CACtCL,OAAQ,OACRZ,SAAOpB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFoB,GAAO,IACV,eAAgB,qBAElBvD,KAAM2G,KAAKC,UAAU,CAAE5G,KAAM,CAAC,CAAE6G,SAAU3G,MAE1CkE,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAGJ3D,QAAQC,IAAI,0CAA2CgE,GAEvD,IAAIwC,EAAY,GAEZC,EAAgB,CAAEC,OAAQ,IAC9B,GAAI1C,IACFA,EAAS2C,QAAQC,SAASC,IACxBA,EAAOC,SAASC,WAAWH,SAASI,IAEb,aAAjBA,EAAMC,QACRR,EAAcC,OAAO7B,KAAK,CACxBqC,IAAKF,EAAMG,YAAYC,QAAQ,QAAS,KAE5C,GACA,IAEAX,EAAcC,OAAOzG,OAAS,GAAG,CACnC,IAAIoH,EACF,+HACF,MAAMC,QAAoB,IAAI9D,SAAQ,CAACC,EAASC,KAC9CL,EAAQM,qBAAqB0D,EAAQ,CACnCxD,OAAQ,OACRZ,QAAS,CAEP,eAAgB,oBAElBvD,KAAM2G,KAAKC,UAAUG,GACrB3C,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAEJ3D,QAAQC,IAAI,qBAAsBsH,GAE9BA,IACFd,EAAYc,EAAYZ,OACrBa,QAAQP,GAAUA,EAAMQ,QAAQC,SAASrC,KACzC1D,KAAKsF,GAAUA,EAAMjC,QAE5B,CAKF,OAFAhF,QAAQC,IAAI,kCAAmCwG,GAExCA,CACT,CAAE,MAAOrG,GAEP,MADAJ,QAAQI,MAAM,qCAAsCA,GAC9CA,CACR,GE1BoCuH,CAC5BzE,EACArD,EACAwF,GAEFrF,QAAQC,IAAI,kCAAmCoG,GAE/C,IAAIuB,EAAkB,IAAIvB,EAAiBX,GAQ3C,GANA1F,QAAQC,IACN,2CACA2H,GAIEA,EAAiB,CACnB,MAAMC,OE3DYnI,OAAOkI,EAAiB1E,KAClD,IACE,IAAI4E,EAAmB,GACvB9H,QAAQC,IAAI,qCAAsC2H,GAClD5H,QAAQC,IAAI,gCAAiCiD,GAC7C,MAAMI,QAAgBC,EAAAA,EAAAA,MAEhBC,EAAY9D,SACT,IAAI+D,SAAQ,CAACC,EAASC,KAC3BL,EAAQM,qBAAqBC,EAAK,CAChCC,OAAQ,MACRZ,UACAa,KAAM,OACNC,WAAaC,IACXjE,QAAQC,IAAI,qBAAsBgE,GAClCP,EAAQO,EAAS,EAEnBC,UAAY9D,IACVJ,QAAQI,MAAM,kBAAmBA,GACjCuD,EAAOvD,EAAM,GAEf,IAKA2H,EAAoBH,EAAgBjG,KAAIjC,UAC5C,IAAK,IAADsI,EAAAC,EACF,MAAMC,EAAc,wHAAA9D,OAA2HsB,GAGzIyC,EAAsC,QAA7BH,SADmBxE,EAAU0E,IACNE,cAAM,IAAAJ,GAE3C,QAF2CC,EAA1BD,EAA4BK,MAC3C3D,GAASA,EAAKM,QAAUU,WAC1B,IAAAuC,OAF2C,EAA1BA,EAEfpG,GAIH,GAFA7B,QAAQC,IAAI,qCAAsCkI,GAE9CA,EAAW,CACb,MAAMG,EAAc,sGAAAlE,OAAyG+D,EAAS,8CAEhII,QAAsB/E,EAAU8E,IAEhC,OAAEF,GAAWG,EAEnB,GAAIH,GAAUA,EAAOlI,OAAS,EAAG,CAAC,IAADsI,EAAAC,EAC/BzI,QAAQC,IAAI,uCAAwCmI,GAEpD,MAAMM,EAAyB,QAAZF,EAAGJ,EAAO,UAAE,IAAAI,OAAA,EAATA,EAAWG,aAEjC,IAAiB,OAAbD,QAAa,IAAbA,GAAqB,QAARD,EAAbC,EAAeN,cAAM,IAAAK,OAAR,EAAbA,EAAuBvI,QAAS,EAAG,CAAC,IAAD0I,EACrC,MAAMC,EAAiD,QAAvCD,EAAGF,EAAcN,OAAO,GAAGO,oBAAY,IAAAC,OAAA,EAApCA,EAAsCR,OAEzD,GAAIS,GAAcA,EAAW3I,OAAS,EAAG,CAEvC,MAAM4I,EAAmBD,EAAWrB,QACjCuB,IACEjB,EAAiBkB,MACfC,GAAcA,EAAUpH,KAAOkH,EAAMlH,OAK5CiG,EAAmB,IAAIA,KAAqBgB,EAC9C,CACF,CACF,CACF,CACF,CAAE,MAAO1I,GAEP,MADAJ,QAAQI,MAAM,0BAA2BsF,EAAatF,GAChDA,CACR,KAIF,aADMqD,QAAQyF,IAAInB,GACXD,CACT,CAAE,MAAO1H,GAEP,MADAJ,QAAQI,MAAM,sCAAuCA,GAC/CA,CACR,GFnBgC+I,CACtBvB,EACA1E,GAKF,GAFAlD,QAAQC,IAAI,yCAA0C4H,GAElDA,EAAW,CACb,MAAMuB,OGlEiB1J,OACjCmI,EACA3E,EACArD,KAEA,IACEG,QAAQC,IAAI,0CAA2C4H,GAEvD,MAAMS,EAAc,6GAAAlE,OAAgHvE,EAAQ,6CAEtIyD,QAAgBC,EAAAA,EAAAA,MAEhBU,QAAiB,IAAIR,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqB0E,EAAgB,CAC3CxE,OAAQ,MACRZ,UACAa,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAGJ3D,QAAQC,IAAI,0CAA2CgE,GAEvD,IAAIoF,EAAyB,GACzBC,EAAqB,GAGrBC,EAAkBtF,EAASmE,OAAO,GAAGoB,yBAAyBpB,OAmElE,aAhEM3E,QAAQyF,IACZK,EAAgB5H,KAAIjC,UAClBM,QAAQC,IAAI,iBAAkBwJ,GAC9B,IAAK,IAAIC,KAAe7B,EACtB,GAAI4B,EAAUE,UAAYD,EAAY7H,GAAI,CACxC,IAAI+H,EAAYF,EAAY1E,MAC5B4E,EAAYA,EAAUvC,QAAQ,QAAS,IAAIA,QAAQ,OAAQ,IAC3D,IAAIwC,EAAM,CAAEhI,GAAI4H,EAAUE,QAAS3E,MAAO0E,EAAY1E,OAEtD,MAAM8E,EAAeL,EAAUM,WAAWpI,KAAKqI,GAE3CA,EAAchE,KAAK0B,SAAS,eAC5BsC,EAAc9I,MAEP8B,EAASgH,EAAc9I,MAAOgC,GAAS+G,MAC3CC,IACC,GAAIA,EAAmB,CACrBlK,QAAQC,IAAIiK,GACZL,EAAe,UAAqB,OAAjBK,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBC,SACtCN,EAAe,UAAqB,OAAjBK,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBE,SAEtC,IAAIrF,EAAU,GACZE,EAAU,GAEZiF,EAAkB9G,MAAMyD,SAASwD,IAC/BtF,GAAW,IAAMsF,EAAGtF,QACpBE,GAAW,IAAMoF,EAAGpF,OAAO,IAG7B4E,EAAY,OAAI9E,EAAQuF,MAAM,GAC9BT,EAAkB,aAAI5E,EAAQqF,MAAM,EACtC,MAKJT,EAAIG,EAAchE,KAAKqB,QAAQuC,EAAW,IAAIW,QAC5CP,EAAc9I,MACTuC,QAAQC,mBAKbD,QAAQyF,IAAIY,GAClBT,EAAyB,IAAIA,EAAwBQ,GACrD7J,QAAQC,IAAI,2BAA4BoJ,GACxCrJ,QAAQC,IAAI,oBAAqB4J,EACnC,CACF,KAIJ7J,QAAQC,IACN,qDACAoJ,GAEFC,EAAqBzB,EAAUL,QAC5BgD,IACEnB,EAAuBL,MAAMyB,GAAaA,EAAS5I,KAAO2I,EAAS3I,OAExE7B,QAAQC,IAAI,wBAAyBqJ,GAI9B,CACLoB,SAAS,EACT/K,KAAM,CACJgL,UAAW,CACT9C,UAAWA,EACX+C,sBAAuBvB,EACvBwB,aAAcvB,IAItB,CAAE,MAAOlJ,GAEP,OADAJ,QAAQI,MAAM,yCAA0CA,GACjD,CAAEsK,SAAS,EAAOtK,QAC3B,GH1C+B0K,CACnBjD,EACA3E,EACArD,GAGFG,QAAQC,IAAI,2BAA4BmJ,GAGpCA,EAAOsB,SACTvF,GAAS4F,EAAAA,EAAAA,IAAmB3B,EAAOzJ,KAAKgL,YACxCxF,GAAS6F,EAAAA,EAAAA,IAAW9H,KAEpBlD,QAAQI,MAAM,6BAElB,MACEJ,QAAQK,KAAK,uCAEjB,MACEL,QAAQK,KAAK,6CAIf,IAAI4K,EAAqB,CAAC,EAC1BjL,QAAQC,IAAI,eAAgB8D,GAE1BkH,EADW,iBAATlH,EACmB,CACnB2G,SAAS,EACT/K,KAAM,SIhGkBD,OAAOwD,EAASrD,KAClD,IAAIsE,EACF,sGACFA,GAAatE,EACbsE,GAAa,UACb,IAAI+G,EAAO,CACTC,YAAa,EACbC,eAAgB,CAAC,gBACjBC,gBAAiB,CAAC,gBAGpB,IACErL,QAAQC,IAAI,kCAAmCJ,GAC/C,MAAMyD,QAAgBC,EAAAA,EAAAA,MAEhBC,EAAYA,CAACK,EAAKyH,EAAQC,IACvB,IAAI9H,SAAQ,CAACC,EAASC,KAC3BL,EAAQM,qBAAqBC,EAAK,CAChCC,OAAQwH,EACRpI,SAAOpB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFoB,GAAO,IACV,eAAgB,qBAElBvD,KAAM2G,KAAKC,UAAUgF,GACrBxH,KAAM,OACNC,WAAaC,IACXjE,QAAQC,IAAI,qBAAsBgE,GAClCP,EAAQO,EAAS,EAEnBC,UAAY9D,IACVJ,QAAQI,MAAM,kBAAmBA,GACjCuD,EAAOvD,EAAM,GAEf,IAIA6D,QAAiBT,EAAUW,EAAW,OAAQ+G,GACpDlL,QAAQC,IAAI,0CAA2CgE,GACvD,MAAM,OAAEmE,GAAWnE,EAEnB,GAAImE,EAAQ,CACV,IAAIoD,EAASvH,EAASmE,OACnBZ,QACEY,IACkB,iBAAhBA,EAAOrE,MACU,iBAAhBqE,EAAOrE,OACTqE,EAAOvG,KAAOhC,IAEjB8B,KAAKyG,IAAM,CACVvG,GAAIuG,EAAOvG,GACXkC,KAAMqE,EAAOrE,KACbiC,KAAMoC,EAAOpD,MACblG,MAAOsJ,EAAOtJ,UA2BlB,OAvBI0M,EAAOtL,OAAS,SAEZuD,QAAQyF,IACZsC,EAAO7J,KAAIjC,UACT,GAAkC,aAA9B+L,EAAM3M,MAAM4M,cAA8B,CAC5C,IAAIC,EAAU,6GAAAvH,OAAgHqH,EAAM5J,GAAE,6CACtI,MAAM0G,QAAsB/E,EAAUmI,EAAY,MAAO,IACzD3L,QAAQC,IAAI,kBAAmBsI,GAE/B,MAAMqD,EAAWrD,EAAcH,OAAOyD,SAASzD,IAAY,IAAD0D,EACxD,OAAmC,QAAnCA,EAAI1D,EAAOoB,gCAAwB,IAAAsC,GAA/BA,EAAiC1D,OAC5BA,EAAOoB,yBAAyBpB,OAAOzG,KAC3CoK,GAAmBA,EAAepC,UAGhC,EAAE,IAEX8B,EAAMO,QAAUJ,CAClB,MAKC,CACLlB,SAAS,EACT/K,KAAM6L,EAEV,CACF,CAAE,MAAOpL,GAEP,OADAJ,QAAQI,MAAM,uBAAwBA,GAC/B,CAAEsK,SAAS,EAAO/K,KAAM,GAAIS,QACrC,GJWmC6L,CACzB/I,EACArD,GAIJG,QAAQC,IAAI,cAAe8D,GAC3B/D,QAAQC,IAAI,qCAAsCgL,GAC9CA,EAAmBP,SACrBvF,GAAS+G,EAAAA,EAAAA,IAAmBjB,EAAmBtL,OAGjD,MAAMwM,OK/GgBzM,OAAOwD,EAASsD,EAAU1H,KACtD,IAAIsN,GAAY,EACZC,EAAuB,GAC3B,MAAMC,EACJ,2GAEF,IAAIpB,EAAO,CACTqB,SAAU,+CACVC,UAAW,CAAC,wBACZC,kBAAkB,EAClBC,kBAAkB,EAClBC,sBAAsB,EACtBC,kBAAmB,CAAC,cAAe,YAAa,mBAChDC,MAAO,mCACPC,KAAM,KACNC,WAAW,GAITC,EAAK,CACPT,SAAU,+CACVU,aAAc,oBACdJ,MAAO,mCACPK,IAAK,CAAC1G,IAGR,IACExG,QAAQC,IAAI,+BAAgCuG,GAE5C,MAAMlD,QAAgBC,EAAAA,EAAAA,MAEhBU,QAAiB,IAAIR,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqB0I,EAAc,CACzCxI,OAAQ,OACRZ,SAAOpB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFoB,GAAO,IACV,eAAgB,qBAElBvD,KAAM2G,KAAKC,UAAU2E,GACrBnH,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAKJ,GAFA3D,QAAQC,IAAI,0CAA2CgE,GAE/B,OAApBA,EAASkJ,OAAiB,CAC5B,MAAMC,QAAkB,IAAI3J,SAAQ,CAACC,EAASC,KAC5CL,EAAQM,qBA/BZ,yGA+BuC,CACjCE,OAAQ,OACRZ,SAAOpB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFoB,GAAO,IACV,eAAgB,qBAElBvD,KAAM2G,KAAKC,UAAUyG,GACrBjJ,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAGJ3D,QAAQC,IAAI,0CAA2CmN,GACnDA,EAAUC,kBAAkBC,4BACxB7J,QAAQyF,IACZkE,EAAUC,kBAAkBC,qBAAqB3L,KAAIjC,UAGnD,GAAe,aAFA6N,EAAI,eAAejD,MAAM,IAEb,CACzB,IAAIkD,EAAI,oGAAApJ,OAAuGmJ,EAAI1L,GAAE,qCAErH,MAAM4L,QAAkB,IAAIhK,SAAQ,CAACC,EAASC,KAC5CL,EAAQM,qBAAqB4J,EAAM,CACjC1J,OAAQ,MACRZ,UACAa,KAAM,OACNC,WAAYN,EACZQ,UAAWP,GACX,IAGA+J,MAAMC,QAAQF,EAAUG,kBAC1BH,EAAUG,gBAAgB/G,SAASgH,IACjCxB,EAAqBvH,KAAK,CACxBP,WAAYsJ,EAAeC,MAAMvJ,WACjCwJ,OAAQF,EAAeG,MAAM,GAAGC,MAChC,IAKJ7B,EAD0B,aAAxBtN,EAAM4M,eACIW,EAAqBrD,MAC9B6E,GACCA,EAAetJ,aAAeiC,GACJ,WAA1BqH,EAAeE,QAKvB,KAIR,MACE/N,QAAQI,MAAM,wBAKhB,OAHAJ,QAAQC,IAAI,6BACZD,QAAQC,IAAI,sBAAuBmM,GAE5B,CACL1B,SAAS,EACT/K,KAAMyM,EACNwB,gBAAiBvB,EAErB,CAAE,MAAOjM,GAQP,MAPAJ,QAAQI,MAAM,kBAAmB,CAC/ByD,IAAKyI,EACLpJ,UACAgI,OACA9K,UAGIA,CACR,GLZiC8N,CAAehL,EAASrD,EAAUf,GAY7D,OAXAkB,QAAQC,IAAI,kCAAmCkM,GAC3CA,EAAazB,UACfvF,GAASgJ,EAAAA,EAAAA,IAAUhC,EAAaxM,OAChCwF,GAASiJ,EAAAA,EAAAA,IAAmBjC,EAAayB,wBAM3C5N,QAAQC,IAAI,wDAGd,CACEvB,EAAe2P,EAAAA,GAEnB,CAAE,MAAOjO,GAGP,MAFAJ,QAAQI,MAAM,4BAA6BA,GAC3C+E,GAASQ,EAAAA,EAAAA,KAAwB,IAC3BvF,CACR,CAAC,QACC+E,GAASQ,EAAAA,EAAAA,KAAwB,GACnC,GAG8B,EMLlC,EA3G6B2I,KAC3B,MAAM,eAAE5P,IAAmBC,EAAAA,EAAAA,MACrB,sBAAE8G,GAA0BP,KAG3BqJ,EAASC,IAAcC,EAAAA,EAAAA,WAAS,GACjCtJ,GAAWC,EAAAA,EAAAA,MAEXsJ,GAAqBC,EAAAA,EAAAA,cACzBjP,UACE,IACE,MAAMkP,QAA4BC,EAAAA,EAAAA,IAAwB,CACxD9O,cAQF,GAAI6O,EAAoBlE,QAAS,CAO/BvF,GACE2J,EAAAA,EAAAA,IAAqB,CACnBC,SAAUH,EAAoBjP,KAAKoP,YAIvC,MAAMC,EAAoBJ,EAAoBjP,KAAKoP,SAMzB,IAADE,EAAAC,EAAzB,GALAlP,QAAQC,IAAI,sBAAuB+O,GAEnC7J,GAASgK,EAAAA,EAAAA,KAAmB,IAGxBP,QACInJ,EACJuJ,EAAkB,uBAClBA,EAAkB,kBACN,QADuBC,EACnClP,EAAU,UAAE,IAAAkP,OAAA,EAAZA,EAAcpP,SACF,QADUqP,EACtBnP,EAAU,UAAE,IAAAmP,OAAA,EAAZA,EAAcpP,WAGpB,MACEpB,EAAe0Q,EAAAA,GAEnB,CAAE,MAAOhP,GACPJ,QAAQI,MAAM,+CAAgDA,GAC9D1B,EAAe0Q,EAAAA,GACjB,CAAC,QACCZ,GAAW,EACb,IAEF,CAACrJ,EAAUM,IAGPlH,GAAaoQ,EAAAA,EAAAA,cACjBjP,UACE8O,GAAW,GACXxO,QAAQC,IAAI,iDAAkDF,GAC9D,IACMA,GAAaA,EAAUG,OAAS,GAClCiF,GACEkK,EAAAA,EAAAA,IAA4B,CAC1BzQ,mBAAoBmB,EAAU,YAG5B2O,EAAmB3O,IAEzBC,QAAQK,KAAK,yCAEjB,CAAE,MAAOD,GACPoO,GAAW,GACXxO,QAAQI,MAAM,8BAA+BA,GAC7CJ,QAAQC,IACN,8DAEFvB,EAAe4Q,EAAAA,GACjB,IAEF,CAACZ,EAAoBhQ,IAgBvB,MAAO,CACL6Q,yBAd8BZ,EAAAA,EAAAA,cAAY,KAC1CxJ,GAASgK,EAAAA,EAAAA,KAAmB,IAC5B,MAAMK,EAAWC,aAAY,KAC3B,MAAMC,EAAqBC,SAASC,cAAc,wBAC9CF,IACFG,cAAcL,IACdM,EAAAA,EAAAA,IAAcJ,EAAoBnR,GACpC,GACC,KAEH,MAAO,IAAMsR,cAAcL,EAAS,GACnC,CAACjR,EAAY4G,IAIdoJ,UACAhQ,aACD,E,wBCpHH,MAsMA,EAtMcsC,IAOP,IAPQ,KACblB,EAAI,QACJoQ,EAAO,WACPC,EAAa,aAAY,UACzBC,EAAS,OACTC,EAAM,MACNpR,GACD+B,EACC,MAAM,iBAAEsP,IAAqBxR,EAAAA,EAAAA,KAC7BqB,QAAQC,IAAI,0BAA2BN,GACvC,MAAOyQ,EAAiBC,IAAsB5B,EAAAA,EAAAA,UAAS9O,IAChD2Q,EAAMC,IAAW9B,EAAAA,EAAAA,WAAS,IAC1B+B,EAAcC,IAAmBhC,EAAAA,EAAAA,UAAS,CAAC,IAElDiC,EAAAA,EAAAA,YAAU,KACRL,EAAmB1Q,EAAK,GACvB,CAACA,IAEJ,MAAMgR,EAAcA,IAAMJ,GAAQ,GAgD5BK,GAAkBC,EAAAA,EAAAA,UAAQ,IAavB,CAZiB,CACtBhP,GAAI,SACJjB,KAAMkQ,IAAA,IAAC,IAAEhQ,GAAKgQ,EAAA,OACZ7R,EAAAA,EAAAA,KAAA,SACE8E,KAAK,WACLzE,UAAU,mBACVyR,QAASjQ,EAAIkQ,gBACb7P,SAAUL,EAAImQ,4BACd,MAIsBlB,IAC3B,CAACA,IAEE/O,GAAQkQ,EAAAA,EAAAA,IAAc,CAC1BvR,KAAMyQ,EACNL,QAASa,EACT9R,MAAO,CACL0R,gBAEFW,oBAAoB,EACpBC,qBAAsBX,EACtBY,iBAAiBA,EAAAA,EAAAA,QAGnB,OACEpQ,EAAAA,EAAAA,MAAA/B,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,UACE8E,KAAK,SACLzE,UAAU,qCACVG,QA9Ea6R,KACbpB,EACFK,GAAQ,GAKRJ,EAJmB,aAAVrR,EAIQyS,EAAAA,GAKAC,EAAAA,GACnB,EAiEwBrS,SAEnB6Q,IAGFM,IACCrP,EAAAA,EAAAA,MAAA/B,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,gBAAgBmS,SAAS,KAAItS,UAC1CF,EAAAA,EAAAA,KAAA,OACEK,UAAU,qCACV8C,MAAO,CAAEsP,SAAU,SAAUvS,UAE7B8B,EAAAA,EAAAA,MAAA,OAAK3B,UAAU,2BAA0BH,SAAA,EACvC8B,EAAAA,EAAAA,MAAA,OAAK3B,UAAU,eAAcH,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAIK,UAAU,mBAAkBH,SAAE4Q,EAAQ,GAAGpP,UAE7CM,EAAAA,EAAAA,MAAA,OAAA9B,SAAA,EACEF,EAAAA,EAAAA,KAAA,UACE8E,KAAK,SACLzE,UAAU,+BACVG,QAASA,IACPuB,EAAM2Q,iCAAN3Q,CAAwC,CACtCO,OAAQ,CAAEwP,SAAS,KAEtB5R,SACF,gBAGDF,EAAAA,EAAAA,KAAA,UACE8E,KAAK,SACLzE,UAAU,4BACVG,QAASA,IACPuB,EAAM2Q,iCAAN3Q,CAAwC,CACtCO,OAAQ,CAAEwP,SAAS,KAEtB5R,SACF,wBAKLF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,iBAAgBH,SAC5B6B,EAAMS,cAAcC,KAAKxB,OAAS,GACjCjB,EAAAA,EAAAA,KAAA,OACEK,UAAU,gBACV8C,MAAO,CAAEwP,UAAW,QAASzS,SAE5B6B,EAAMS,cAAcC,KAAKC,KAAKb,IAC7BG,EAAAA,EAAAA,MAAA,OAEE3B,UAAU,8CACV8C,MAAO,CACLyP,gBAAiB/Q,EAAIkQ,gBACjB,UACA,WACJ7R,SAAA,EAEFF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,OAAMH,UAClB2S,EAAAA,EAAAA,IACChR,EAAIiR,kBAAkB,GAAGC,OAAOC,UAAUrR,KAC1CE,EAAIiR,kBAAkB,GAAGG,iBAG7BjT,EAAAA,EAAAA,KAAA,OAAAE,SAAM2B,EAAIiB,SAASgO,EAAQ,GAAGrP,iBAdzBI,EAAIe,SAmBf5C,EAAAA,EAAAA,KAAA,KAAGK,UAAU,iBAAgBH,SAAC,yBAGlC8B,EAAAA,EAAAA,MAAA,OACE3B,UAAU,0CACV8C,MAAO,CAAEyP,gBAAiB,WAAY1S,SAAA,EAEtCF,EAAAA,EAAAA,KAAA,UACE8E,KAAK,SACLzE,UAAU,yBACVG,QAASkR,EAAYxR,SACtB,WAGDF,EAAAA,EAAAA,KAAA,UACEQ,QAjJD0S,KAEf,MACMC,EADepR,EAAMqR,sBAAsB3Q,KACfC,KAC/B+C,GAASA,EAAK3C,SAAS,qBAE1B/B,QAAQC,IAAI,kBAAmBmS,GAEH,IAAxBA,EAAalS,OAEfiQ,EAAiBmC,EAAAA,KAajB7B,EAAgB,CAAC,GACjBR,EAAUmC,GACVzB,IACF,EAwHgB5M,KAAK,SACLzE,UAAU,kBAAiBH,SAC5B,mBAOTF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,kCAGlB,EC9EP,EAzHwCuB,IASjC,IATkC,WACvC0R,EAAU,WACVC,EAAU,OACVC,EAAM,SACNC,EAAQ,WACRC,EAAU,aACVC,EAAY,OACZ1C,EAAM,MACNpR,GACD+B,EACC,MAAM,iBAAEsP,IAAqBxR,EAAAA,EAAAA,MACtBkU,EAAWC,IAAgBrE,EAAAA,EAAAA,UAAS,KACpCsE,EAAeC,IAAoBvE,EAAAA,EAAAA,UAAS,IA0BnDzO,QAAQC,IAAI,uBAAwB0S,GAyDpC,OAFA3S,QAAQC,IAAI,mBAAoB8S,IAG9B9R,EAAAA,EAAAA,MAAA,OAAK3B,UAAU,sBAAqBH,SAAA,EAClCF,EAAAA,EAAAA,KAACgU,EAAK,CACJtT,KAAMgT,EACN3C,WAAW,aACXD,QAAS6C,EACT1C,OAAQA,EACRD,UAxDctQ,IAGlB,GAFAK,QAAQC,IAAIN,GACZmT,EAAanT,GACTA,EAAKO,OAAS,EAAG,CACnB,MAAMgT,EAAWvT,EAAKgC,KAAKqD,IAAK,CAC9BA,MAAOA,EACPmO,IAAK,IACLC,OAAQ,UACRC,WAAY,GACZC,WAAY,GACZC,OAAQ,GACRC,cAAe,GACfC,gBAAiB,GACjB,aAAc,SACd,aAAc,MACd,aAAc,QACdzR,KAAM,MACN,aAAc,OAEhBuQ,EAAWW,GACXF,EAAiBE,GACjBV,EAAW7S,EACb,GAmCIb,MAAOA,KAETG,EAAAA,EAAAA,KAAA,UACEK,UAAU,qCACVG,QA7FkBiU,KAClBjB,GAAUvC,EACZuC,IAKAtC,EAJmB,aAAVrR,EAIQ6U,EAAAA,GAKAC,EAAAA,GACnB,EAgF6BzU,SAC1B,UAGDF,EAAAA,EAAAA,KAAA,UACEK,UAAU,oCACVG,QAjFeoU,KACfnB,GACFA,GACF,EA8E0BvT,SACvB,aAGG,ECuWV,EAxcwB2U,KACtB,MAAM,wBAAEvE,EAAuB,QAAEhB,GAAYD,KACtCyF,EAAUC,IAAevF,EAAAA,EAAAA,UAAS,IAClCwF,EAAWC,IAAgBzF,EAAAA,EAAAA,UAAS,KACpC0F,EAAeC,IAAoB3F,EAAAA,EAAAA,UAAS,KAC5C4F,EAAYC,IAAiB7F,EAAAA,EAAAA,UAAS,KAEtC8F,EAAsBC,IAA2B/F,EAAAA,EAAAA,UAAS,KAC1DgG,EAAgBC,IAAqBjG,EAAAA,EAAAA,WAAS,IAC9CkG,EAAqBC,IAA0BnG,EAAAA,EAAAA,WAAS,GACzDtJ,GAAWC,EAAAA,EAAAA,OACX,iBAAE3G,IAAqBE,EAAAA,EAAAA,KAkE7BqB,QAAQC,IAAI,2BAA4BgU,GACxC,MAAMY,GAAoBhW,EAAAA,EAAAA,KACvBC,GAAUA,EAAMC,cAAc8V,oBAG3B7V,GAAoBH,EAAAA,EAAAA,KACvBC,GAAUA,EAAMC,cAAcC,oBAEjCgB,QAAQC,IAAI,oBAAqBjB,GAEjC,MAAM8V,GAAuBjW,EAAAA,EAAAA,KAC1BC,GAAUA,EAAMC,cAAc+V,uBAEjC9U,QAAQC,IAAI,yBAA0B6U,GACtC,MAAMlH,GAAkB/O,EAAAA,EAAAA,KACrBC,GAAUA,EAAMC,cAAcgW,gBAAgBnH,kBAEjD5N,QAAQC,IAAI,wBAAyB2N,GAErC,MAAMoH,GAAYnW,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,cAAciW,YAEvDnN,GAAYhJ,EAAAA,EAAAA,KACfC,GAAUA,EAAMC,cAAcgW,gBAAgBlN,YAEjD7H,QAAQC,IAAI,wCAAyC4H,GAErD,MAAMoN,GAAcpW,EAAAA,EAAAA,KACjBC,GAAUA,EAAMC,cAAcgW,gBAAgBlK,eAEjD7K,QAAQC,IAAI,oCAAqCgV,IACjDvE,EAAAA,EAAAA,YAAU,KACR4D,EAAcW,EAAY,GACzB,CAACA,IACJ,MAAMC,GAAerW,EAAAA,EAAAA,KAClBC,GAAUA,EAAMC,cAAcgW,gBAAgBnK,wBAEjD5K,QAAQC,IAAI,2BAA4BiV,GACxC,MAAMC,GAAkBtW,EAAAA,EAAAA,KACrBC,GAAUA,EAAMC,cAAcgW,gBAAgBI,kBAEjDnV,QAAQC,IAAI,uCAAwCkV,GACpD,MAAMjF,GAASrR,EAAAA,EAAAA,KACZC,GAAUA,EAAMC,cAAcgW,gBAAgB7E,SAEjDlQ,QAAQC,IAAI,6BAA8BiQ,GAE1C,MAAMhN,GAAUrE,EAAAA,EAAAA,KACbC,GAAUA,EAAMC,cAAcgW,gBAAgB7R,UAEjDlD,QAAQC,IAAI,mCAAoCiD,GAchD,GAPAlD,QAAQC,IAAI,kBAAmBgU,IAE/BvD,EAAAA,EAAAA,YAAU,KACJuD,EAAU/T,QAAU,GACtB8T,GAAaoB,GAAYA,EAAU,GACrC,GACC,CAACnB,IACAjV,EAAkB+P,UAAY/P,EAAkBJ,mBAClD,IAAIE,EAAQE,EAAkB+P,SAAS,kBACnChL,EAAO/E,EAAkBJ,mBAAmBkB,WAGlD,MAAOuV,EAA2BC,IAChC7G,EAAAA,EAAAA,UAASyG,GACXlV,QAAQC,IACN,0CACAoV,IAEF3E,EAAAA,EAAAA,YAAU,KACR4E,EAA6BJ,GAC7Bd,EAAiBc,EAAa,GAC7B,CAACA,IACJ,MAAMzC,EAAS/S,UAAsB,IAAD6V,EAClC,IAAIC,EAAe,CAAC,EAEpB,MAAMC,EAAwB,GAE9BzV,QAAQC,IAAI,aAAcgU,GAC1BjU,QAAQC,IAAI,oCAAqCoV,GACjD,IAAIK,EAAa,GAEjB,MAAMC,EAAyBN,EAA0B1T,KAAKiU,IAC5D,IAAIC,GAAY/T,EAAAA,EAAAA,GAAA,GAAQ8T,GAsCxB,OApCA3B,EAAUpN,SAASiP,IAAe,IAADC,EAC/B,IAAIC,EAAW,CAAC,EAChB,MAAMC,EAAYH,EAAUI,MAAM7O,QAAQ,QAAS,IAAIA,QACrD,OACA,IAGI8O,EAEL,QAFYJ,EAAGlO,EAAUQ,MACvB+N,GAAcA,EAAUpR,QAAU8Q,EAAUI,eAC9C,IAAAH,OAAA,EAFeA,EAEblU,GAEH,GAAIgU,EAAa7Q,QAAU8Q,EAAUI,MAAO,EACxBL,EAAaQ,KAAO,OAAS,SAG7BP,EAAU9T,OACtB,MAAMsU,KAAKL,IACbT,EAAa,OAADpR,OAAQ6R,IAAkC,SAAnBH,EAAU9T,KAC7CgU,EAASO,SAAQ,OAAAnS,OAAU6R,GAC3BD,EAASQ,UAA+B,SAAnBV,EAAU9T,OAE/BwT,EAAa,GAADpR,OAAI6R,EAAS,SAA6B,SAAnBH,EAAU9T,KAC7CgU,EAASO,SAAQ,GAAAnS,OAAM6R,EAAS,QAChCD,EAASQ,UAA+B,SAAnBV,EAAU9T,MAEjC6T,EAAaQ,KAA0B,SAAnBP,EAAU9T,KAC9BgU,GAAQlU,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACHkU,GAAQ,IACXnU,GAAIsU,EACJnR,MAAO8Q,EAAUI,MACjBO,KAAM,WAERf,EAAW5Q,KAAKkR,GAEpB,KAEKH,CAAY,IAIrB5B,EAAUpN,SAASiP,IAKjB,IAJqBT,EAA0BhN,MAC5CqO,GAAiBA,EAAa1R,QAAU8Q,EAAUI,QAGlC,CAAC,IAADS,EACjB,MAAMV,EAAYH,EAAUI,MAAM7O,QAAQ,QAAS,IAAIA,QACrD,OACA,IAEI8O,EAEL,QAFYQ,EAAG9O,EAAUQ,MACvB+N,GAAcA,EAAUpR,QAAU8Q,EAAUI,eAC9C,IAAAS,OAAA,EAFeA,EAEb9U,GAEH,GAAIsU,EAAS,CACX,IAAIS,EAAc,CAAE/U,GAAIsU,EAASnR,MAAO8Q,EAAUI,OAC9CF,EAAW,CAAC,EAChBP,EAAsB3Q,KAAKqR,GAEJ,SAAnBL,EAAU9T,MACR,MAAMsU,KAAKL,IACbT,EAAa,OAADpR,OAAQ6R,KAAe,EACnCD,EAASO,SAAQ,OAAAnS,OAAU6R,KAE3BT,EAAa,GAADpR,OAAI6R,EAAS,UAAU,EACnCD,EAASO,SAAQ,GAAAnS,OAAM6R,EAAS,SAElCW,EAAYP,MAAO,EACnBL,EAASQ,WAAY,IAErBI,EAAYP,MAAO,EACnBL,EAASQ,WAAY,GAGvBb,EAAuB7Q,KAAK8R,GAC5BZ,GAAQlU,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACHkU,GAAQ,IACXnU,GAAIsU,EACJnR,MAAO8Q,EAAUI,MACjBO,KAAM,QAERf,EAAW5Q,KAAKkR,EAClB,CACF,KAGF,IAAIa,EAAe,GACnBxB,EAA0BxO,SAAS6P,IAIjC,IAH0BzC,EAAUjL,MACjC8M,GAAcA,EAAUI,QAAUQ,EAAa1R,QAE5B,CAAC,IAAD8R,EACpB,MAAMX,EAEL,QAFYW,EAAGjP,EAAUQ,MACvBoB,GAAcA,EAAUzE,QAAU0R,EAAa1R,eACjD,IAAA8R,OAAA,EAFeA,EAEbjV,GACCsU,GACFU,EAAa/R,KAAKqR,EAEtB,KAEFnW,QAAQC,IAAI,qCAAsC4W,GAIlD7W,QAAQC,IAAI,mCAAoC0V,GAChD3V,QAAQC,IAAI,4BAA6BwV,GACzCzV,QAAQC,IAAI,iBAAkBuV,GAC9BxV,QAAQC,MAGR,MAAM6G,OC/ScpH,OACtB8V,EACAC,EACApM,EACAnG,EACA6T,EACAC,EACAC,EACAlT,EACA8S,EACAnB,EACA9H,KAEA,IACE5N,QAAQC,IAAI,+CACZD,QAAQC,IAAI,2BAA4B8D,GACxC/D,QAAQC,IAAI,8BAA+ByV,GAC3C1V,QAAQC,IAAI,2BAA4B2N,SAElBrK,EAAAA,EAAAA,MA4BtB,IAAI2T,EAAsBD,EAAczP,QAAQ2P,GACR,aAAlCA,EAAUrY,MAAM4M,gBACHkC,EAAgBvF,MAC5B+O,GACCA,EAAO7S,aAAe4S,EAAUtV,IACA,WAAhCuV,EAAOrJ,OAAOrC,kBAMtB1L,QAAQC,IAAI,4BAA6BiX,GAEzC,IAAIG,EAAW,GACf3B,EAAW7O,SAAS4C,IAElB,GAAIA,EAAU+M,UAAW,CACvB,IAAIc,EAAa,GACjBJ,EAAoBrQ,SAAS0Q,IACtBA,EAAmBvL,QAAQtE,SAAS+B,EAAU5H,KACjDyV,EAAWxS,KAAK,CACd0S,QAASD,EAAmB1V,GAC5B4V,UAAWF,EAAmBvR,MAElC,IAEFqR,EAASvS,KAAK,CACZjD,GAAI4H,EAAU5H,GACdmD,MAAOyE,EAAUzE,MACjBwG,OAAQ8L,EACRvT,KAAM0F,EAAUgN,MAEpB,KAGF,IAAIiB,EAAe,GACnB1X,QAAQC,IAAI,cAAeoX,GAC3BA,EAASxQ,SAASnC,IAChB,IAAIiT,EAAU,GAGd,GACEjK,MAAMC,QAAQjJ,EAAK8G,SACnB9G,EAAK8G,OAAOoM,OAAOnM,GAAUA,EAAMgM,YACnC,CACA,MAAMI,EAAcnT,EAAK8G,OACtB7J,KAAK8J,GAAUA,EAAMgM,YACrBK,KAAK,MACR9X,QAAQC,IAAI,oBAAqB4X,GAE/BF,EAD8B,QAA5BjT,EAAKX,KAAK2H,cACL,GAAAtH,OAAMM,EAAKM,MAAK,kDAAAZ,OAAiDyT,EAAW,2BAAAzT,OAA0BM,EAAKM,OAE3G,kCAAAZ,OAAqCM,EAAKM,MAAK,2BAAAZ,OAA0ByT,EAAW,2BAAAzT,OAA0BM,EAAKM,OAE5HhF,QAAQC,IAAI,cAAe0X,EAC7B,MAEEA,EAAO,0BAAAvT,OAA6BM,EAAKM,MAAK,KAIhD0S,GAAY,GAAAtT,OAAOuT,EAAO,KAAI,IAEhC3X,QAAQC,IAAIoX,GACZrX,QAAQC,IAAI,2BAA4ByX,GAExC,IAAIK,EAAarC,EACdlO,QACEiC,GACkC,QAAjCA,EAAUgN,KAAK/K,gBACd2L,EAASrO,MAAMgP,GAAcA,EAAUnW,KAAO4H,EAAU5H,OAE5DF,KAAK8H,GAAcA,EAAU5H,KAChC7B,QAAQC,IAAI,mBAAoB8X,GAChC,IAAIE,EAAa,CAAC,EAClBvC,EAAW7O,SAAS4C,KACS4N,EAASrO,MACjCgP,GAAcA,EAAUnW,KAAO4H,EAAU5H,MAEc,WAAjC4H,EAAUgN,KAAK/K,gBACtCuM,EAAWxO,EAAU8M,UAAY9M,EAAU+M,UAC7C,IAEFxW,QAAQC,IAAI,kBAAmBgY,GAE/B,IAAIC,EAAmBxC,EACpBlO,QACEiC,GACCA,EAAU+M,YACTa,EAASrO,MAAMgP,GAAcA,EAAUnW,KAAO4H,EAAU5H,OAE5DF,KAAK8H,GAAcA,EAAU5H,KA6EhC,OA3EA7B,QAAQC,IAAI,4BAA6BiY,GAyEzClY,QAAQC,IAAI,wDAEL,CACLyK,SAAS,EACTiN,QAAS,0BACTN,SAAUA,EACVK,aAAcA,EAElB,CAAE,MAAOtX,GAEP,OADAJ,QAAQI,MAAM,kBAAmBA,GAC1B,CAAEsK,SAAS,EAAOiN,QAAS,sBAAuBvX,QAC3D,GD+EuB+X,CACnB3C,EACAC,EACAE,EACAzS,EACiB,OAAjBlE,QAAiB,IAAjBA,GAAqC,QAApBuW,EAAjBvW,EAAmBJ,0BAAkB,IAAA2W,GAArCA,EAAuC1V,SACvCgI,EACAsN,EACApR,EACA8S,EACAnB,EACA9H,GAGE9G,EAAO4D,SACT1K,QAAQC,IAAI,eAAgB6G,GAC5BrI,EAAiB2Z,EAAAA,KAEjBC,MAAM,yBAGRrY,QAAQC,IAAI,sBAAuBkU,EAAc,GAOnDzD,EAAAA,EAAAA,YAAU,KACHsE,GACHzF,GACF,GACC,CAACyF,EAAWzF,KAGfmB,EAAAA,EAAAA,YAAU,KACRgE,EAAkBI,EAAqB,GACtC,CAACA,IAGJ,MAAMwD,GAAezH,EAAAA,EAAAA,UACnB,IZ3TyBqE,IACtBA,EACEA,EAAavT,KAAKoH,IAAK,CAC5BmN,OAAY,OAALnN,QAAK,IAALA,OAAK,EAALA,EAAO/D,QAAS,MACvBmO,KAAU,OAALpK,QAAK,IAALA,OAAK,EAALA,EAAOoK,MAAO,IACnBC,OAAQ,UACR,cAAmB,OAALrK,QAAK,IAALA,OAAK,EAALA,EAAOwP,YAAa,MAClC,cAAmB,OAALxP,QAAK,IAALA,OAAK,EAALA,EAAOyP,YAAa,MAClCjF,QAAa,OAALxK,QAAK,IAALA,OAAK,EAALA,EAAOwK,SAAU,MACzB,iBAAsB,OAALxK,QAAK,IAALA,OAAK,EAALA,EAAO0P,eAAgB,MACxC,kBAAmB1P,EAAM2P,gBAAkB,MAC3C,aAAc,SACd,aAAc,MACd,cAAc,EACd1W,KAAM+G,EAAMsN,KAAO,OAAS,MAC5B,aAAc,OAdU,GY0TlBsC,CAAaxE,IACnB,CAACA,IAGG/D,GAAkBS,EAAAA,EAAAA,UACtB,IZ7S+BwD,IAC5BA,EACEA,EAAW1S,KAAKoH,IAAK,CAC1B,mBAAwB,OAALA,QAAK,IAALA,OAAK,EAALA,EAAO/D,QAAS,UAFb,GY4ShB4T,CAAmBvE,IACzB,CAACA,IAEHrU,QAAQC,IAAI,wCAAyCmQ,IAGrDM,EAAAA,EAAAA,YAAU,KACJ4H,EAAapY,QAAU,IACzBF,QAAQC,IAAI,kBAAmBqY,GAC/BpE,EAAaoE,GACbtE,GAAaoB,GAAYA,EAAU,IACrC,GACC,CAACkD,IAYJ,MAAMvJ,GAAW8B,EAAAA,EAAAA,UACf,IZtXwB7R,KAC1B,IAAKA,IAAsBA,EAAkB+P,SAC3C,OAAO,KAGT,MAAMrK,EAAO1F,EAAkB+P,SAE/B,IAAIA,EAAW,CACb/J,MAAON,EAAKmU,OAAS,MACrB9U,KAAMW,EAAK+R,MAAQ,MACnB,iBAAkB/R,EAAK,mBAAqB,MAC5CoU,MAAOpU,EAAKqU,OAAS,MACrB,4BAA6BrU,EAAK,8BAAgC,MAClEsU,YAAatU,EAAKsU,aAAe,MACjC,mBAAoBtU,EAAK,qBAAuB,MAChD,2BAA4BA,EAAK,6BAA+B,MAChE,aAAcA,EAAK,eAAiB,MACpCuU,SACEvU,EAAKuU,UACL,uHAOJ,MAJkB,aAAdvU,EAAK+R,OACP1H,EAASmK,IAAMxU,EAAKwU,KAAO,MAC3BnK,EAAS,cAAgBrK,EAAK,eAAiB,OAE1CqK,CAAQ,EY4VPoK,CAAYna,IAClB,CAACA,IAEHgB,QAAQC,IAAI8O,IAEZ2B,EAAAA,EAAAA,YAAU,KACRkE,IAAyB7F,EAAS,GACjC,CAACA,IAGJ,MAAMgB,IAAUc,EAAAA,EAAAA,UAAQ,IAAMpQ,GAAc,IAEtCmS,IAAe/B,EAAAA,EAAAA,UAAQ,IAAM9N,GAAe,IAoClD,OAPA2N,EAAAA,EAAAA,YAAU,KACR1Q,QAAQC,IAAI,mCAAoC,CAC9CsO,UACAuG,uBACAE,aACA,GACD,CAACzG,EAASuG,EAAsBE,KAEjC/T,EAAAA,EAAAA,MAAA/B,EAAAA,SAAA,CAAAC,SAAA,EAEI6V,IAAczG,IAAYkG,IAAkBxV,EAAAA,EAAAA,KAACma,EAAAA,EAAoB,IAGlE7K,IAAWtP,EAAAA,EAAAA,KAACoa,EAAAA,EAAM,IAGlBrE,IACC/T,EAAAA,EAAAA,MAAA/B,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,qCAAoCH,UACjD8B,EAAAA,EAAAA,MAAA,OAAK3B,UAAU,UAASH,SAAA,EACtBF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,YAAWH,UACxBF,EAAAA,EAAAA,KAACqa,EAAAA,EAAK,CACJC,IAAI,+DACJC,IAAI,YACJla,UAAU,YACVG,QApDQga,KACtBlK,IAEApK,GAASuU,EAAAA,EAAAA,KAAa,IACtBvU,GACE2J,EAAAA,EAAAA,IAAqB,CACnBC,SAAU,CAAC,EACX4K,cAAe,GACfC,SAAU,GACVhb,mBAAoB,MAGxBuG,GACE4F,EAAAA,EAAAA,IAAmB,CACjBlD,UAAW,GACX+C,sBAAuB,GACvBC,aAAc,GACdsK,gBAAiB,GACjBjF,QAAQ,EACRhN,QAAS,CAAC,KAIdgR,EAAa,IACbU,GAAuB,EAAM,MAgClB7F,IAAY9P,EAAAA,EAAAA,KAAC4a,EAAAA,EAAmB,CAACla,KAAMoP,SAK3C0F,GACCxV,EAAAA,EAAAA,KAAA,OAAKK,UAAU,yBAAwBH,UACrCF,EAAAA,EAAAA,KAACoa,EAAAA,EAAM,OAGTpa,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACE8B,EAAAA,EAAAA,MAAA,OAAK3B,UAAU,cAAaH,SAAA,EAC1BF,EAAAA,EAAAA,KAAC6a,EAA+B,CAC9BnH,WAAYvC,EACZzQ,KAAMsU,EACNrB,aAAcA,GACd1C,OAAQA,EACRqC,WA/XK5S,IACnBK,QAAQC,IAAI,iBACZuU,EAAwB7U,GACxBK,QAAQC,IAAI,gCAAiCgU,GAC7CjU,QAAQC,IAAI,0BAA2BN,GACvCyU,GAAkB2F,GAAS,IAAIpa,KAASoa,KACxC/F,GAAaoB,GAAYA,EAAU,GAAE,EA0XvB5C,WAxXM7S,IACpBK,QAAQC,IAAI,mCAAoCN,GAChD,MAAMqa,EAAmB5J,EAAgB5I,QACtC1G,IACEnB,EAAK0I,MAAM4R,GAAgBA,IAAgBnZ,EAAI,uBAGpD,GADAd,QAAQC,IAAI,mCAAoC+Z,GAC5CA,EAAkB,CACpB,MAAME,EAAkBF,EAAiBrY,KAAK+C,IAAI,CAChDM,MAAON,EAAK,uBAGd1E,QAAQC,IAAIia,GACZ5F,EAAc4F,EAChB,GA2WczH,OAxaG/S,UACjBM,QAAQC,IAAI,sCAAuCgU,SAE7CxB,EAAOwB,EAAU,EAsaTvB,SApaKhT,UAGnB,GAFAM,QAAQC,IAAI,uBAAwB4U,GAEhCA,EAAkB3U,OAAS,EAAG,CAEhC,MAAMia,EAAiBtF,EAAkBlT,KAAKb,GAAQA,EAAIoV,QAC1DlW,QAAQC,IAAI,mBAAoBka,GAGhC,MAAMC,EAAuBjG,EAAc3M,QACxC1G,IAASqZ,EAAezS,SAAS5G,EAAIkE,SAExChF,QAAQC,IAAI,0BAA2Bma,GAGvC,MAGMC,EAHgBlG,EAAc3M,QAAQ1G,GAC1CqZ,EAAezS,SAAS5G,EAAIkE,SAEMrD,KAAKb,IAAG,CAC1CkE,MAAOlE,EAAIkE,UAEbhF,QAAQC,IAAI,kBAAmBoa,GAG/BjG,EAAiBgG,GACjB9F,GAAegG,GAAqB,IAC/BA,KACAD,IAEP,MACEhC,MAAM,4CACR,EAsYcvZ,MAAOA,KAETG,EAAAA,EAAAA,KAACsb,EAAAA,EAAa,CAEZ5a,KAAMsU,EACNlE,QAASA,GACT7N,KAAM,CAAEC,gBA5TCX,IACvB0S,EAAa1S,EAAY,IAwTNuS,aAUhB,EEhdP,GAAIyG,OAAOhV,QAAUgV,OAAOhV,OAAOiV,OAAQ,CACzC,MAAMC,EAAOF,OAAOhV,OAAOiV,OAAOE,UAChC,EACAH,OAAOhV,OAAOiV,OAAOG,YAAY,KAAO,GAEtCF,EACFG,EAAAA,EAA0BH,EAE1B1a,QAAQI,MAAM,yBAA0Boa,OAAOhV,OAAOiV,OAE1D,MACEza,QAAQI,MAAM,yDACdya,EAAAA,EAA0B,KAE5B,IAAIC,EAmCGpb,eAAeqb,IACpB,MAAM9W,QAAiB+W,EAAAA,EAAAA,MACjBC,EAAkBhX,EAASiX,0BAC3B7V,EAAQpB,EAASoB,OAEvBE,EAAAA,EAAAA,IACGC,IACCA,EAAO2V,SAAS,IAGhBnb,QAAQC,IAAI,eAEVuF,EAAO4V,cAAcH,GACrBzV,EAAO6V,SAAS,QAAShW,GAE3BG,EAAO8V,SAAS,UAAU,MAjDhC,SAAe9V,GAAS,IAAD+V,EAAAC,EACrB,IAAIC,GACW,QAAbF,EAAAf,OAAOhV,cAAM,IAAA+V,GAAM,QAANC,EAAbD,EAAerQ,YAAI,IAAAsQ,OAAN,EAAbA,EAAqB5L,cAAc,WACnCD,SAAS+L,eAAe,QACrBD,IACHzb,QAAQK,KAAK,mDACTma,OAAOhV,QAAUgV,OAAOhV,OAAO0F,MAEjCuQ,EAAc9L,SAASgM,cAAc,OACrCF,EAAY5Z,GAAK,OACjB2D,EAAO0F,KAAK0Q,YAAYH,KAGxBA,EAAc9L,SAASgM,cAAc,OACrCF,EAAY5Z,GAAK,OACjB8N,SAASzE,KAAK0Q,YAAYH,KAGzBX,IACHA,EAAOe,EAAAA,WAAoBJ,IAI7BX,EAAKgB,QACH7a,EAAAA,EAAAA,MAAC8a,EAAAA,GAAQ,CAACC,MAAOA,EAAAA,EAAM7c,SAAA,EACrBF,EAAAA,EAAAA,KAACX,EAAe,CAAAa,UACdF,EAAAA,EAAAA,KAAC6U,EAAe,OAGlB7U,EAAAA,EAAAA,KAACgd,EAAAA,GAAc,OAGrB,CAkBQC,EAAO,GACP,IACA9b,IACFJ,QAAQI,MAAM,gCAAiCA,EAAM,GAG3D,CAQE2a,G","sources":["WidgetLifecycle.jsx","services/api/refreshService.js","pages/plantAssignment/dataHelpers.js","services/api/PlantAssignment/userGroupService.js","services/api/PlantAssignment/searchCAService.js","hooks/usePlantAssignment.js","services/api/PlantAssignment/fetchCsrfService.js","services/api/PlantAssignment/allPlantSevice.js","services/api/PlantAssignment/assignedPlantService.js","services/api/PlantAssignment/plantChildrenService.js","services/api/PlantAssignment/CADetailService.js","hooks/usePlantDropableArea.js","components/Popup/Popup.jsx","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/plantAssignment.jsx","services/api/PlantAssignment/saveTableDataService.js","plantIndex.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { refreshWidgetData } from \"./services/api/refreshService\"; // Import refresh\r\nimport useToast from \"./hooks/useToast\"; // Import useToast\r\nimport useDroppableArea from \"./hooks/useDroppableArea\"; // Import useDroppableArea\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"./utils/toastMessages\";\r\nimport { useSelector } from \"react-redux\";\r\nimport CustomButton from \"./components/Button/Button\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  // Receives children\r\n  const { handleDrop } = useDroppableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const initialDraggedData = useSelector((state) => {\r\n    return state.droppedObject.droppedObjectData.initialDraggedData;\r\n  });\r\n\r\n  const handleClick = async () => {\r\n    if (\r\n      initialDraggedData && \r\n      initialDraggedData.data.items[0].objectId &&\r\n      initialDraggedData.data.items[0].objectType &&\r\n      typeof handleDrop === \"function\"\r\n    ) {\r\n      try {\r\n        const dataItems = initialDraggedData.data.items;\r\n        await refreshWidgetData(dataItems, handleDrop);\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      } catch (error) {\r\n        console.error(\"Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      }\r\n    } else {\r\n      console.error(\"[onRefresh] initialDraggedData is undefined\");\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <>\r\n      {/* <button onClick={handleClick}>Refresh</button> */}\r\n      <CustomButton\r\n        variant=\"outline-secondary\"\r\n        className=\"m-2\"\r\n        size=\"lg\"\r\n        text=\"Refresh\"\r\n        onClick={handleClick}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","export const refreshWidgetData = async (dataItems, handleDrop) => {\r\n  console.log(\"[refreshWidgetData] called with dataItems:\", dataItems);\r\n  if (!dataItems || dataItems.length === 0) {\r\n    console.warn(\"[Refresh] No dropped data available to refresh.\");\r\n    return;\r\n  }\r\n  try {\r\n    if (typeof handleDrop !== \"function\") {\r\n      throw new Error(\"[Refresh] handleDrop is not a function.\");\r\n    }\r\n    await handleDrop(dataItems);\r\n  } catch (error) {\r\n    console.error(\"[Refresh] Error during handleDrop execution:\", error);\r\n  }\r\n};\r\n","// pages/revisionFloat/dataHelpers.js\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (asignedPlant) => {\r\n  if (!asignedPlant) return [];\r\n  return asignedPlant.map((plant) => ({\r\n    Plant: plant?.title || \"N/A\",\r\n    Seq: plant?.Seq || \"1\",\r\n    Status: \"Current\" || \"N/A\",\r\n    \"MFG Change\": plant?.MFGChange || \"N/A\",\r\n    \"MFG Status\": plant?.MFGStatus || \"N/A\",\r\n    Change: plant?.Change || \"N/A\",\r\n    \"Change Status\": plant?.ChangeStatus || \"N/A\",\r\n    \"Oracle Template\": plant.OracleTemplate || \"N/A\",\r\n    \"ERP Status\": \"Active\" || \"N/A\",\r\n    \"ERP Export\": \"Yes\" || \"N/A\",\r\n    \"Lead Plant\": false,\r\n    MBom: plant.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n    \"Sort Value\": \"\",\r\n  }));\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = [\r\n  { accessorKey: \"Plant\", header: \"Plant\" },\r\n  { accessorKey: \"Seq\", header: \"Seq\" },\r\n  {\r\n    accessorKey: \"MBom\",\r\n    header: \"MBom\",\r\n    cell: ({ row, getValue, table }) => {\r\n      const handleDropdownChange = (e) => {\r\n        const updatedValue = e.target.value;\r\n\r\n        // Update the table data state here\r\n        const updatedData = table\r\n          .getRowModel()\r\n          .rows.map((r) =>\r\n            r.id === row.id ? { ...r.original, MBom: updatedValue } : r.original\r\n          );\r\n\r\n        table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n      };\r\n\r\n      return (\r\n        <select\r\n          value={getValue()}\r\n          onChange={handleDropdownChange}\r\n          className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n          style={{\r\n            appearance: \"none\",\r\n            width: \"70%\",\r\n            padding: \"5px\",\r\n            fontSize: \"14px\",\r\n            color: \"#333\",\r\n            background: \"none\",\r\n            border: \"none\",\r\n            textAlign: \"left\",\r\n          }}\r\n          onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n          onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n        >\r\n          <option value=\"Make\">Make</option>\r\n          <option value=\"Buy\">Buy</option>\r\n        </select>\r\n      );\r\n    },\r\n  },\r\n  { accessorKey: \"Status\", header: \"Status\" },\r\n  { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n  { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n  { accessorKey: \"Change\", header: \"Change\" },\r\n  { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n  { accessorKey: \"Oracle Template\", header: \"Oracle Template\" },\r\n  { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n  { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n  { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n\r\n  { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n];\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/sharing/getSharing\";\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const SearchCA = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n\r\n  try {\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const caID = searchResponse.changeAction[0]?.identifier;\r\n\r\n    console.log(\"Response From 1st Call\", caID);\r\n\r\n    if (caID) {\r\n      // 2nd API call to fetch Change Action details\r\n      const CAUrl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${caID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n\r\n      console.log(\"Response From 2nd Call\", CAresponse);\r\n\r\n      if (CAresponse) {\r\n        // Use for...of for async handling in loop\r\n        for (const item of CAresponse.isFlowDownOf || []) {\r\n          if (item.type === \"Change Action\") {\r\n            const parentCAUrl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${item.identifier}?$fields=proposedChanges,flowDown`;\r\n\r\n            try {\r\n              // 3rd API call to fetch Parent Change Action details\r\n              const parentCAResponse = await fetchData(parentCAUrl);\r\n\r\n              console.log(\"Response From 3rd Call\", parentCAResponse);\r\n\r\n              if (parentCAResponse) {\r\n                CADetails.CAAtt.push({\r\n                  CATitle: parentCAResponse.title,\r\n                  CAState: parentCAResponse.state,\r\n                });\r\n              }\r\n            } catch (error) {\r\n              console.error(\"Error fetching parent CA data:\", error);\r\n            }\r\n          }\r\n        }\r\n\r\n        CADetails[\"MCOState\"] = CAresponse.state;\r\n        CADetails[\"MCOTitle\"] = CAresponse.title;\r\n      }\r\n    }\r\n\r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n\r\nimport {\r\n  setCAName,\r\n  setHeaders,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n\r\n  const dispatch = useDispatch();\r\n  let email = \"\";\r\n  let securityContext1 = \"\";\r\n  initWidget((widget) => {\r\n    securityContext1 = widget.getValue(\"Credentials\");\r\n    email = widget.getValue(\"email\");\r\n  });\r\n\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n  console.log(\"Security Context in usePlantAssignment:\", securityContext1);\r\n  // const securityContext1 = initWidget.getValue(\"Credentials\");\r\n  // console.log(\"Srcurity Context in usePlantAssignment:\", securityContext1);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true));\r\n      const headers = await fetchCsrfToken(securityContext1);\r\n      // Step 1: Call Initial Service\r\n      if (headers) {\r\n        console.log(\"[UsePlantAssignment] Headers are\", headers);\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 3: Pass Combined Data to Additional Service\r\n        if (allCollabSpaces) {\r\n          const allPlants = await getAllPlants(\r\n            allCollabSpaces,\r\n            headers,\r\n            objectId\r\n          );\r\n          console.log(\"[Use Plant Assignment] All Plants are:\", allPlants);\r\n\r\n          if (allPlants) {\r\n            const plants = await fetchAssignedPlants(\r\n              allPlants,\r\n              headers,\r\n              objectId\r\n            );\r\n\r\n            console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n            // to dispatch the plants\r\n            if (plants.success) {\r\n              dispatch(setPlantObjectData(plants.data.plantData));\r\n              dispatch(setHeaders(headers));\r\n            } else {\r\n              console.error(\"Failed to fetch plant data\");\r\n            }\r\n          } else {\r\n            console.warn(\"[Use All Plants] There are no Plants\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use All Plants] There are no CollabSpace\");\r\n        }\r\n\r\n        // Step 4: Call Remaining Independent Services\r\n        let getProductChildren = {};\r\n        console.log(\"Type Before:\", type);\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = {\r\n            success: true,\r\n            data: [],\r\n          };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          ); // type we need here\r\n        }\r\n        console.log(\"Type After:\", type);\r\n        console.log(\"[Use All Plants] Product Childrens\", getProductChildren);\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use All Plants] Get CA Details\", getCaDetails);\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n        }\r\n\r\n        // Step 5: Dispatch Results to Redux\r\n\r\n        // hERE WE CAN ADD TOAST\r\n        console.log(\"[Plant Assignment] All Services Executed Successfully\");\r\n\r\n        return;\r\n      } else {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      dispatch(setParentDetailsLoading(false));\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // End loading at the top level\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async (securityContext1) => {\r\n  try {\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId // ProductId\r\n) => {\r\n  try {\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes.member;\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return SearchCA(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  let urlObjWAF =\r\n    \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/\";\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  const URLCADetails =\r\n    \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/enorelnav/v2/navigate/setPreferences\";\r\n\r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/enorelnav/v2/navigate/getEcosystem\";\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n\r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n\r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      if (response2.objectsByPatterns.caproposedwhere_from) {\r\n        await Promise.all(\r\n          response2.objectsByPatterns.caproposedwhere_from.map(async (itm) => {\r\n            const status = itm[\"ds6w:status\"].slice(14);\r\n\r\n            if (status !== \"Complete\") {\r\n              let url3 = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,flowDown`;\r\n\r\n              const response3 = await new Promise((resolve, reject) => {\r\n                WAFData.authenticatedRequest(url3, {\r\n                  method: \"GET\",\r\n                  headers,\r\n                  type: \"json\",\r\n                  onComplete: resolve,\r\n                  onFailure: reject,\r\n                });\r\n              });\r\n\r\n              if (Array.isArray(response3.proposedChanges)) {\r\n                response3.proposedChanges.forEach((proposedChange) => {\r\n                  proposedChangesArray.push({\r\n                    identifier: proposedChange.where.identifier,\r\n                    action: proposedChange.whats[0].what,\r\n                  });\r\n                });\r\n              }\r\n\r\n              if (state.toLowerCase() === \"released\") {\r\n                resObejct = proposedChangesArray.some(\r\n                  (proposedChange) =>\r\n                    proposedChange.identifier === objectID &&\r\n                    proposedChange.action === \"Modify\"\r\n                );\r\n              } else {\r\n                resObejct = true;\r\n              }\r\n            }\r\n          })\r\n        );\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n\r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n\r\n    throw error;\r\n  }\r\n};\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst usePlantDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n\r\n  // const [csrfHeaders, setCsrfHeaders] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      setLoading(true); // Start loading state\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          dispatch(\r\n            setInitialDroppedObjectData({\r\n              initialDraggedData: dataItems[0],\r\n            })\r\n          );\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        setLoading(false);\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    dispatch(setIsDroppedAction(false));\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default usePlantDropableArea;\r\n","import React, { useState, useMemo, useEffect } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\nconst Popup = ({\r\n  data,\r\n  columns,\r\n  buttonText = \"Add Plants\",\r\n  addedItem,\r\n  CAName,\r\n  state,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  console.log(\"[Popup] Data Received: \", data);\r\n  const [uniqueTableData, setUniqueTableData] = useState(data);\r\n  const [show, setShow] = useState(false);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n\r\n  useEffect(() => {\r\n    setUniqueTableData(data);\r\n  }, [data]);\r\n\r\n  const handleClose = () => setShow(false);\r\n\r\n  const handleShow = () => {\r\n    if (CAName) {\r\n      setShow(true);\r\n    } else if (state === \"RELEASED\") {\r\n      // alert(\r\n      //   \"Change Action is required to assign plants to Product, please assign Modify change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      // alert(\r\n      //   \"Change Action is required to assign plants to Product, please assign change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n  };\r\n\r\n  const addPlant = () => {\r\n    // Some Logic\r\n    const selectedRows = table.getSelectedRowModel().rows;\r\n    const selectedItem = selectedRows.map(\r\n      (item) => item.original[\"Available Plant\"]\r\n    );\r\n    console.log(\"[selected Item]\", selectedItem);\r\n    // need to add a condition for the no of selected items\r\n    if (selectedItem.length === 0) {\r\n      // alert(\"Please select any of the Plant\");\r\n      showWarningToast(MSG_EMPTYADD_ERROR);\r\n    } else {\r\n      // console.log(\"dfhgfd\", selectedRows);\r\n      // const updatedTableData = uniqueTableData.filter(\r\n      //   (row) =>\r\n      //     !selectedRows.find(\r\n      //       (selectedRow) =>\r\n      //         selectedRow.original[\"Available Plant\"] === row[\"Available Plant\"]\r\n      //     )\r\n      // );\r\n      // console.log(updatedTableData);\r\n      // setUniqueTableData(updatedTableData);\r\n      // console.log(\"bjdbjd\", uniqueTableData);\r\n      setRowSelection({}); // Reset row selection after removal\r\n      addedItem(selectedItem);\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  // Enhance columns with selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"select\",\r\n      cell: ({ row }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"form-check-input\"\r\n          checked={row.getIsSelected()}\r\n          onChange={row.getToggleSelectedHandler()}\r\n        />\r\n      ),\r\n    };\r\n\r\n    return [selectionColumn, ...columns];\r\n  }, [columns]);\r\n\r\n  const table = useReactTable({\r\n    data: uniqueTableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n    },\r\n    enableRowSelection: true,\r\n    onRowSelectionChange: setRowSelection,\r\n    getCoreRowModel: getCoreRowModel(),\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-outline-primary btn-lg m-2\"\r\n        onClick={handleShow}\r\n      >\r\n        {buttonText}\r\n      </button>\r\n\r\n      {show && (\r\n        <>\r\n          <div className=\"modal d-block\" tabIndex=\"-1\">\r\n            <div\r\n              className=\"modal-dialog modal-dialog-centered\"\r\n              style={{ maxWidth: \"500px\" }}\r\n            >\r\n              <div className=\"modal-content  container\">\r\n                <div className=\"modal-header\">\r\n                  <h5 className=\"me-5 popup-title\">{columns[0].header}</h5>\r\n\r\n                  <div>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-outline-primary me-3\"\r\n                      onClick={() =>\r\n                        table.getToggleAllRowsSelectedHandler()({\r\n                          target: { checked: true },\r\n                        })\r\n                      }\r\n                    >\r\n                      Select All\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-outline-secondary\"\r\n                      onClick={() =>\r\n                        table.getToggleAllRowsSelectedHandler()({\r\n                          target: { checked: false },\r\n                        })\r\n                      }\r\n                    >\r\n                      Deselect All\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"modal-body p-0\">\r\n                  {table.getRowModel().rows.length > 0 ? (\r\n                    <div\r\n                      className=\"overflow-auto\"\r\n                      style={{ maxHeight: \"60vh\" }}\r\n                    >\r\n                      {table.getRowModel().rows.map((row) => (\r\n                        <div\r\n                          key={row.id}\r\n                          className=\"p-3 border-bottom d-flex align-items-center\"\r\n                          style={{\r\n                            backgroundColor: row.getIsSelected()\r\n                              ? \"#d5e8f2\"\r\n                              : \"inherit\",\r\n                          }}\r\n                        >\r\n                          <div className=\"me-3\">\r\n                            {flexRender(\r\n                              row.getVisibleCells()[0].column.columnDef.cell,\r\n                              row.getVisibleCells()[0].getContext()\r\n                            )}\r\n                          </div>\r\n                          <div>{row.original[columns[0].accessorKey]}</div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  ) : (\r\n                    <p className=\"text-muted p-3\">No data available</p>\r\n                  )}\r\n                </div>\r\n                <div\r\n                  className=\"modal-footer d-flex justify-content-end\"\r\n                  style={{ backgroundColor: \"#f1f1f1\" }}\r\n                >\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-secondary me-2\"\r\n                    onClick={handleClose}\r\n                  >\r\n                    Close\r\n                  </button>\r\n                  <button\r\n                    onClick={addPlant}\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary\"\r\n                  >\r\n                    Add\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"modal-backdrop fade show\"></div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Popup;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n} from \"../../utils/toastMessages\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [AddedItem, setAddedItem] = useState([]);\r\n  const [addedItemData, setAddedItemData] = useState([]);\r\n\r\n  const handleSaveClick = () => {\r\n    if (onSave && CAName) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      // alert(\r\n      //   \"Change Action is required to update pLANTS, please assign Modify change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      // alert(\r\n      //   \"Change Action is required to update, please assign change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  // useEffect(() => {\r\n  //   onAddPlant(addedItemData);\r\n  //   console.log(\"Data Passed\");\r\n  //   // addedPlant(AddedItem);\r\n  // }, [addedItemData]);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    setAddedItem(data);\r\n    if (data.length > 0) {\r\n      const newItems = data.map((title) => ({\r\n        title: title, // Use the title as Plant (or replace with actual data)\r\n        Seq: \"1\",\r\n        Status: \"Current\",\r\n        MFG_Change: \"\",\r\n        MFG_Status: \"\",\r\n        Change: \"\",\r\n        Change_Status: \"\",\r\n        Oracle_Template: \"\",\r\n        \"ERP Status\": \"Active\",\r\n        \"ERP Export\": \"Yes\",\r\n        \"Lead Plant\": \"false\",\r\n        MBom: \"Buy\",\r\n        \"Sort Value\": \"\",\r\n      }));\r\n      onAddPlant(newItems);\r\n      setAddedItemData(newItems);\r\n      addedPlant(data);\r\n    }\r\n  };\r\n  // useEffect(() => {\r\n  //   // if (AddedItem.length > 0) {\r\n  //   //   const newItems = AddedItem.map((title) => ({\r\n  //   //     title: title, // Use the title as Plant (or replace with actual data)\r\n  //   //     Seq: \"1\",\r\n  //   //     Status: \"Current\",\r\n  //   //     MFG_Change: \"\",\r\n  //   //     MFG_Status: \"\",\r\n  //   //     Change: \"\",\r\n  //   //     Change_Status: \"\",\r\n  //   //     Oracle_Template: \"\",\r\n  //   //     \"ERP Status\": \"Active\",\r\n  //   //     \"ERP Export\": \"Yes\",\r\n  //   //     \"Lead Plant\": \"false\",\r\n  //   //     MBom: \"Buy\",\r\n  //   //     \"Sort Value\": \"\",\r\n  //   //   }));\r\n  //   //   onAddPlant(newItems);\r\n  //   //   setAddedItemData(newItems);\r\n  //   //   addedPlant(AddedItem);\r\n  //   // }\r\n  // }, [AddedItem]);\r\n\r\n  console.log(\"Added item data:\", addedItemData);\r\n\r\n  return (\r\n    <div className=\"d-flex cta-absolute\">\r\n      <Popup\r\n        data={uniquedata}\r\n        buttonText=\"Add Plants\"\r\n        columns={uniqueColumn}\r\n        CAName={CAName}\r\n        addedItem={handleData}\r\n        state={state}\r\n      />\r\n      <button\r\n        className=\"btn btn-outline-success btn-lg m-2\"\r\n        onClick={handleSaveClick}\r\n      >\r\n        Save\r\n      </button>\r\n      <button\r\n        className=\"btn btn-outline-danger btn-lg m-2\"\r\n        onClick={handleRemove}\r\n      >\r\n        Remove\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport { clearAllListeners } from \"@reduxjs/toolkit\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [addedDataFromToolbar, setAddedDataFromToolbar] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast } = useToast();\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    await onSave(tableData); // Pass tableData when calling onSave\r\n  };\r\n  const handleRemove = async () => {\r\n    console.log(\"Selected Table Rows:\", selectedTableRows);\r\n\r\n    if (selectedTableRows.length > 0) {\r\n      // Extract IDs or titles of selected rows\r\n      const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n      console.log(\"Selected Titles:\", selectedTitles);\r\n\r\n      // Filter out selected rows from assignedPlant and update tableData\r\n      const updatedAssignedPlant = assignedPlant.filter(\r\n        (row) => !selectedTitles.includes(row.title)\r\n      );\r\n      console.log(\"Updated Assigned Plant:\", updatedAssignedPlant);\r\n\r\n      // Extract filtered-out rows to add them back to uniqueData\r\n      const removedPlants = assignedPlant.filter((row) =>\r\n        selectedTitles.includes(row.title)\r\n      );\r\n      const removedTitles = removedPlants.map((row) => ({\r\n        title: row.title,\r\n      }));\r\n      console.log(\"Removed Titles:\", removedTitles);\r\n\r\n      // Update state\r\n      setAssignedPlant(updatedAssignedPlant); // Updated tableData\r\n      setUniqueData((prevUniquePlants) => [\r\n        ...prevUniquePlants,\r\n        ...removedTitles,\r\n      ]); // Add removed items back to uniqueData\r\n    } else {\r\n      alert(\"Please select at least one row to remove.\");\r\n    }\r\n  };\r\n\r\n  const handleAdded = (data) => {\r\n    console.log(\"Data Received\");\r\n    setAddedDataFromToolbar(data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    setAssignedPlant((prev) => [...data, ...prev]);\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n  };\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n  useEffect(() => {\r\n    setUniqueData(uniquePlant);\r\n  }, [uniquePlant]);\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData.objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    setAssignedPlant(asignedPlant);\r\n  }, [asignedPlant]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    const updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData?.initialDraggedData?.objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      console.log(\"Save result:\", result);\r\n      showSuccessToast(MSG_SAVE_SUCCESS);\r\n    } else {\r\n      alert(`Error: Unable to Save`); // Show failure alert\r\n    }\r\n\r\n    console.log(\"[Plant Assignment]:\", assignedPlant);\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(\r\n    () => getTableData(assignedPlant),\r\n    [assignedPlant]\r\n  );\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  // useEffect(() => {\r\n  //   if (addedDataFromToolbar.length > 0) {\r\n  //     console.log(\"[Plant Assignment] Table data\", tableData);\r\n  //     console.log(\"Added Data from Toolbar\", addedDataFromToolbar);\r\n  //     setAssignedPlant((prev) => [...addedDataFromToolbar, ...prev]);\r\n  //     setTableKey((prevKey) => prevKey + 1); // Update table key\r\n  //   }\r\n  // }, [addedDataFromToolbar]);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(() => tableColumns, []);\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n  return (\r\n    <>\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n\r\n      {/* Show initial loader when loading is true */}\r\n      {loading && <Loader />}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && <CardWithDragAndDrop data={cardData} />}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  data={tableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        return !change;\r\n      }\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n\r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        ErrorObj.push({\r\n          id: classItem.id,\r\n          title: classItem.title,\r\n          childs: prodchilds,\r\n          type: classItem.Type,\r\n        });\r\n      }\r\n      // }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n\r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} plant MBOM can't be modified because childs: ${childTitles} are not classified in ${item.title}`;\r\n        } else {\r\n          message = `Product can't be classified to ${item.title} plant because childs: ${childTitles} are not classified in ${item.title}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n\r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n\r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (isIdNotInErrorObj && classItem.Type.toLowerCase() === \"update\") {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n\r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n\r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n\r\n    // if (newClasses.length > 0) {\r\n    //   let classifyUrl =\r\n    //     \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n    //   let classifybody = {\r\n    //     id: productId,\r\n    //     type: type,\r\n    //     classes: newClasses,\r\n    //     mode: \"classifyParent\",\r\n    //   };\r\n    //   const classifyResponse = await fetchData(\r\n    //     classifyUrl,\r\n    //     classifybody,\r\n    //     \"POST\"\r\n    //   );\r\n    //   console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    // }\r\n\r\n    // if (updateBody.trim().length > 0) {\r\n    //   const nextApiUrl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n    //   const response = await fetchData(nextApiUrl, \"\", \"GET\");\r\n    //   console.log(\"CStamp Response:\", response);\r\n    //   let cestamp = response.member[0]?.cestamp || \"\";\r\n    //   updateBody[\"cestamp\"] = cestamp;\r\n\r\n    //   const patchUrl = `https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n    //   await fetchData(patchUrl, updateBody, \"PATCH\");\r\n    //   console.log(\"Updated database successfully.\");\r\n    // }\r\n\r\n    // if (\r\n    //   propagateClasses.length > 0 &&\r\n    //   productChilds.length > 0 &&\r\n    //   type === \"VPMReference\"\r\n    // ) {\r\n    //   let classifyUrl =\r\n    //     \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    //   let classifybody = {\r\n    //     id: productId,\r\n    //     type: type,\r\n    //     classes: propagateClasses,\r\n    //     childs: productChilds,\r\n    //     mode: \"classifychilds\",\r\n    //   };\r\n    //   const childclassifyResponse = await fetchData(\r\n    //     classifyUrl,\r\n    //     classifybody,\r\n    //     \"POST\"\r\n    //   );\r\n    //   console.log(\r\n    //     \"child classifyResponse:\",\r\n    //     JSON.stringify(childclassifyResponse)\r\n    //   );\r\n    // }\r\n    // if (rowstoDelete.length > 0) {\r\n    //   let declassifyUrl =\r\n    //     \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n\r\n    //   let classifybody = {\r\n    //     id: productId,\r\n    //     type: type,\r\n    //     classes: rowstoDelete,\r\n    //   };\r\n    //   const declassifyResponse = await fetchData(\r\n    //     declassifyUrl,\r\n    //     classifybody,\r\n    //     \"POST\"\r\n    //   );\r\n    //   console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    // }\r\n\r\n    console.log(\"All classification API calls completed successfully.\");\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { initWidget } from \"./lib/widget\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { SecurityContext } from \"./services/api/droppableService\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./pages/plantAssignment/plantAssignment\";\r\n\r\n// Dynamically set Webpack's public path if `widget` is available\r\nif (window.widget && window.widget.uwaUrl) {\r\n  const path = window.widget.uwaUrl.substring(\r\n    0,\r\n    window.widget.uwaUrl.lastIndexOf(\"/\") + 1\r\n  );\r\n  if (path) {\r\n    __webpack_public_path__ = path;\r\n  } else {\r\n    console.error(\"Invalid uwaUrl format:\", window.widget.uwaUrl);\r\n  }\r\n} else {\r\n  console.error(\"uwaUrl is missing. Using default './' as public path.\");\r\n  __webpack_public_path__ = \"./\";\r\n}\r\nlet root; // Declare a global variable for the React root\r\nfunction start(widget) { \r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n  if (!rootElement) {\r\n    console.warn(\"Root element not found. Creating dynamically...\");\r\n    if (window.widget && window.widget.body) {\r\n      // Use widget's body if available\r\n      rootElement = document.createElement(\"div\");\r\n      rootElement.id = \"root\";\r\n      widget.body.appendChild(rootElement);\r\n    } else {\r\n      // Fallback to document body\r\n      rootElement = document.createElement(\"div\");\r\n      rootElement.id = \"root\";\r\n      document.body.appendChild(rootElement);\r\n    }\r\n  }\r\n  if (!root) {\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle>\r\n        <PlantAssignment />\r\n      </WidgetLifecycle>\r\n      {/* Pass setter to App */}\r\n      <ToastContainer />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport async function initializeWidget() {\r\n  const response = await SecurityContext();\r\n  const securitycontext = response.securitycontextpreference;\r\n  const email = response.email;\r\n\r\n  initWidget(\r\n    (widget) => {\r\n      widget.setTitle(\"\");\r\n      // const widgetId = widget.id;\r\n      // console.log(\"widgetId\", widgetId);\r\n      console.log(\"plant index\");\r\n      if (process.env.NODE_ENV !== \"development\") {\r\n        widget.addPreference(securitycontext);\r\n        widget.setValue(\"email\", email);\r\n      }\r\n      widget.addEvent(\"onLoad\", () => {\r\n        start();\r\n      });  \r\n    }, (error) => {\r\n      console.error(\"Widget initialization failed:\", error);\r\n    }\r\n  );\r\n}\r\n\r\n// Dynamically import setupMocks.js in development mode\r\nif (process.env.NODE_ENV === \"development\") {\r\n  require(\"./setupMocks\");\r\n  initializeWidget();\r\n} else {\r\n  // Dynamically wait for WidgetContainer's handleDrop in production\r\n  initializeWidget();\r\n}\r\n"],"names":["WidgetLifecycle","handleDrop","useDroppableArea","showSuccessToast","showErrorToast","useToast","initialDraggedData","useSelector","state","droppedObject","droppedObjectData","_jsx","_Fragment","children","CustomButton","variant","className","size","text","onClick","async","data","items","objectId","objectType","dataItems","console","log","length","Error","error","warn","refreshWidgetData","MSG_REFRESH_SUCCESS","MSG_REFRESH_ERROR","tableColumns","accessorKey","header","cell","_ref","row","getValue","table","_jsxs","value","onChange","e","_table$options$meta","updatedValue","target","updatedData","getRowModel","rows","map","r","id","_objectSpread","original","MBom","options","meta","updateTableData","style","appearance","width","padding","fontSize","color","background","border","textAlign","onMouseOver","onMouseOut","uniqueColumns","SearchCA","flowDownCA","headers","CADetails","CAAtt","_searchResponse$chang","WAFData","loadWAFData","fetchData","Promise","resolve","reject","authenticatedRequest","url","method","type","onComplete","response","onFailure","urlObjWAF","concat","caID","changeAction","identifier","CAUrl","CAresponse","item","isFlowDownOf","parentCAUrl","parentCAResponse","push","CATitle","title","CAState","usePlantAssignment","dispatch","useDispatch","email","securityContext1","initWidget","widget","handlePlantAssignment","collabSpace","setParentDetailsLoading","csrfURL","process","csrfToken","csrf","name","csrfValue","securityContextHeader","securityContextValue","fetchCsrfToken","userGroupCollab","JSON","stringify","objectID","userGroup","userGroupBody","groups","results","forEach","result","sharings","userGroups","group","access","uri","userGroupID","replace","grpUrl","grpresponse","filter","members","includes","getUserGroupCollab","allCollabSpaces","allPlants","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","member","find","libraryDataURL","classResponse","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","plant","some","userClass","all","getAllPlants","plants","initialAssignedClasses","uniqueInAllclasses","ClassExtensions","ClassificationAttributes","classItem","parentClass","ClassID","PlantName","obj","promiseArray","Attributes","eachAttribute","then","flowDownCADetails","MCOTitle","MCOState","CA","slice","trim","allClass","assigned","success","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setPlantObjectData","setHeaders","getProductChildren","body","expandDepth","type_filter_bo","type_filter_rel","Method","classifyBody","childs","child","toLowerCase","classesurl","classIds","flatMap","_member$Classificatio","classification","classes","fetchProductChildren","setProductChildren","getCaDetails","resObejct","proposedChangesArray","URLCADetails","widgetId","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","bd","responseMode","ids","status","response2","objectsByPatterns","caproposedwhere_from","itm","url3","response3","Array","isArray","proposedChanges","proposedChange","where","action","whats","what","fetchCADetails","setCAName","setProposedChanges","MSG_FETCH_CSRF_HEADERS_FAILED","usePlantDropableArea","loading","setLoading","useState","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","MSG_FETCH_OBJECT_DETAILS_FAILED","setInitialDroppedObjectData","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","columns","buttonText","addedItem","CAName","showWarningToast","uniqueTableData","setUniqueTableData","show","setShow","rowSelection","setRowSelection","useEffect","handleClose","enhancedColumns","useMemo","_ref2","checked","getIsSelected","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","handleShow","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","tabIndex","maxWidth","getToggleAllRowsSelectedHandler","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","addPlant","selectedItem","getSelectedRowModel","MSG_EMPTYADD_ERROR","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","AddedItem","setAddedItem","addedItemData","setAddedItemData","Popup","newItems","Seq","Status","MFG_Change","MFG_Status","Change","Change_Status","Oracle_Template","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","PlantAssignment","tableKey","setTableKey","tableData","setTableData","assignedPlant","setAssignedPlant","uniqueData","setUniqueData","addedDataFromToolbar","setAddedDataFromToolbar","isTableLoading","setIsTableLoading","isCardDataAvailable","setIsCardDataAvailable","selectedTableRows","loadingParentDetails","plantObjectData","isDropped","uniquePlant","asignedPlant","productChildren","prevKey","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find","finalObj","plantName","Plant","classid","classitem","MBOM","test","MBOMName","MBOMValue","Type","initialClass","_allPlants$find2","classObject","rowstoDelete","_allPlants$find3","productId","AllClasses","productChilds","NotPropagableChilds","prodChild","change","ErrorObj","prodchilds","notPropagableChild","childId","childName","Finalmessage","message","every","childTitles","join","newClasses","errorItem","updateBody","propagateClasses","saveData","MSG_SAVE_SUCCESS","alert","newTableData","MFGChange","MFGStatus","ChangeStatus","OracleTemplate","getTableData","getUniqueTableData","Title","owner","Owner","Description","imageURL","EIN","getCardData","DragAndDropComponent","Loader","Image","src","alt","handleHomeClick","setIsDropped","parentDetails","versions","CardWithDragAndDrop","PlantAssignmentToolbarNativeCta","prev","updatedTableData","selectedRow","transformedData","selectedTitles","updatedAssignedPlant","removedTitles","prevUniquePlants","ReusableTable","window","uwaUrl","path","substring","lastIndexOf","__webpack_public_path__","root","initializeWidget","SecurityContext","securitycontext","securitycontextpreference","setTitle","addPreference","setValue","addEvent","_window$widget","_window$widget$body","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","store","ToastContainer","start"],"sourceRoot":""}