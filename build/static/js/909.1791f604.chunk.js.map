{"version":3,"file":"static/js/909.1791f604.chunk.js","mappings":"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","sources":["pages/revisionFloat/dataHelpers.js","WidgetLifecycle-munish.jsx","pages/revisionFloat/revisionFloatToolbarNativeCta.jsx","utils/getUserEmail.js","pages/revisionFloat/revisionFloat.jsx","index.js"],"sourcesContent":["// pages/revisionFloat/dataHelpers.js\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faXmark } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CheckmarkCell = () => (\r\n  <FontAwesomeIcon icon={faCheck} className=\"green-icon\" />\r\n);\r\n\r\nconst CrossmarkCell = () => (\r\n  <FontAwesomeIcon icon={faXmark} className=\"cross-icon\" />\r\n);\r\n\r\nexport const getCardData = (cardData) => {\r\n  if (!cardData || typeof cardData !== \"object\") {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    title: cardData.Title || \"N/A\",\r\n    type: cardData.Type || \"N/A\",\r\n    \"Maturity State\": cardData[\"Maturity State\"] || \"N/A\",\r\n    owner: cardData.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": cardData[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: cardData.Description || \"N/A\",\r\n    \"Dropped Revision\": cardData[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": cardData[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": cardData[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      cardData.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n    ...(cardData.Type !== \"Document\" && {\r\n      EIN: cardData.EIN || \"N/A\",\r\n      \"CAD Format\": cardData[\"CAD Format\"] || \"N/A\",\r\n    }),\r\n  };\r\n};\r\n\r\nexport const getTableData = (parentDetails, cardData) => {\r\n  if (!parentDetails || !Array.isArray(parentDetails.data)) {\r\n    console.warn(\"[getTableData] ⚠️ No parent details available. Returning empty array.\");\r\n    return [];\r\n  }\r\n  return parentDetails.data.map((parent) => ({\r\n    EIN: parent.EIN || \"N/A\",\r\n    Title: parent.Title || \"N/A\",\r\n    Description: parent.Description || \"N/A\",\r\n    Type: parent.Type || \"N/A\",\r\n    Revision: parent[\"Dropped Revision\"] || \"N/A\",\r\n    \"Dropped Revision ID\": parent[\"Dropped Revision ID\"] || \"N/A\",\r\n    \"Connected Child Revision\": parent.connectedChildRev || \"N/A\",\r\n    \"Latest child connected\": parent.toBeChildRevConnected ? false : true,\r\n    \"To-Be child connected\": parent.toBeChildRevConnected || \"-\",\r\n    State: parent[\"Maturity State\"] || \"N/A\",\r\n    Owner: parent.Owner || \"N/A\",\r\n    \"CAD Format\": parent[\"CAD Format\"] || \"N/A\",\r\n    Collabspace: parent[\"Collaborative Space Title\"] || \"N/A\",\r\n\r\n    // Add relationship field if the type is Document\r\n    ...(cardData?.Type === \"Document\" && {\r\n      relationship: parent.relationship || \"N/A\",\r\n    }),\r\n  }));\r\n};\r\n\r\nexport const tableColumns = [\r\n  {\r\n    accessorKey: \"EIN\",\r\n    header: \"EIN\",\r\n    columnPinning: true,\r\n  },\r\n  { accessorKey: \"Title\", header: \"Title\" },\r\n  { accessorKey: \"Description\", header: \"Description\" },\r\n  { accessorKey: \"Type\", header: \"Type\" },\r\n  { accessorKey: \"Revision\", header: \"Revision\" },\r\n  {\r\n    accessorKey: \"Connected Child Revision\",\r\n    header: \"Connected Revision\",\r\n  },\r\n  {\r\n    accessorKey: \"Latest child connected\",\r\n    header: \"latest Revision Connected\",\r\n    cell: ({ cell }) => {\r\n      const value = cell.getValue();\r\n      // Render a checkmark if true, a cross if false\r\n      return value ? <CheckmarkCell /> : <CrossmarkCell />;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: \"To-Be child connected\",\r\n    header: \"Revision to-be Connected\",\r\n  },\r\n  {\r\n    accessorKey: \"relationship\",\r\n    header: \"Relationship\",\r\n  },\r\n  { accessorKey: \"State\", header: \"State\" },\r\n  { accessorKey: \"Owner\", header: \"Owner\" },\r\n  { accessorKey: \"CAD Format\", header: \"CAD Format\" },\r\n  { accessorKey: \"Collabspace\", header: \"Collabspace\" },\r\n];\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { refreshWidgetData } from \"./services/api/refreshService\"; \r\nimport useToast from \"./hooks/useToast\"; \r\nimport useDroppableArea from \"./hooks/useDroppableArea\"; \r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"./utils/toastMessages\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst WidgetLifecycle = ({ children }) => {\r\n  const { handleDrop } = useDroppableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const initialDraggedData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData.initialDraggedData\r\n  );\r\n\r\n  console.log(\"initialDraggedData in widget-lifecycle\", initialDraggedData);\r\n\r\n  const hasOnRefreshRun = useRef(false); // Prevent duplicate onRefresh registrations\r\n\r\n  console.log(\"---[widget lifecycle]--- starts\");\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // Prevent multiple event registrations\r\n    if (hasOnRefreshRun.current) {\r\n      console.warn(\"[WidgetLifecycle] ⏳ onRefresh is already registered. Ignoring duplicate.\");\r\n      return;\r\n    }\r\n    hasOnRefreshRun.current = true; // Mark as registered\r\n\r\n    const onRefresh = async () => {\r\n      console.log(\"[WidgetLifecycle] 🔄 onRefresh triggered!\");\r\n      if (\r\n        initialDraggedData &&\r\n        initialDraggedData.data.items[0].objectId &&\r\n        initialDraggedData.data.items[0].objectType &&\r\n        typeof handleDrop === \"function\"\r\n      ) {\r\n        try {\r\n          const dataItems = initialDraggedData.data.items;\r\n          await refreshWidgetData(dataItems, handleDrop);\r\n          showSuccessToast(MSG_REFRESH_SUCCESS);\r\n        } catch (error) {\r\n          console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n          showErrorToast(MSG_REFRESH_ERROR);\r\n        }\r\n      } else {\r\n        console.error(\"[WidgetLifecycle] ⚠️ initialDraggedData is undefined\");\r\n      }\r\n    };\r\n\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    console.log(\"[WidgetLifecycle] ✅ onRefresh event registered successfully\");\r\n\r\n// ❌ DO NOT REMOVE onRefresh on unmount to prevent re-adding it unnecessarily\r\n}, []); // 👈 Empty dependency array ensures it runs **only once**\r\n\r\nreturn <>{children}</>;\r\n};\r\n\r\n\r\nexport default WidgetLifecycle;\r\n","import React from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useRevisions from \"../../hooks/useRevisions\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_NO_ROWS, MSG_NO_REPLACE } from \"../../utils/toastMessages\";\r\nimport getUserEmail from \"../../utils/getUserEmail\";\r\nimport WidgetLifecycle from \"../../WidgetLifecycle-munish\";\r\n\r\n\r\nconst RevisionFloatToolbarNativeCta = () => {\r\n  const { replaceRevisions } = useRevisions();\r\n  const { showErrorToast } = useToast();\r\n  // Access relevant data from Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  ); // Assuming you're storing selected rows in Redux\r\n\r\n  // console.log(\"selectedTableRows\", selectedTableRows);\r\n\r\n  const handleReplace = async () => {\r\n    if (!selectedTableRows || selectedTableRows.length === 0) {\r\n      showErrorToast(MSG_NO_ROWS);\r\n      return;\r\n    }\r\n\r\n    // Get the parentDetails from droppedObjectData\r\n    const allParents = droppedObjectData.parentDetails?.data;\r\n    if (!allParents || allParents.length === 0) {\r\n      showErrorToast(\"No parent details available.\");\r\n      return;\r\n    }\r\n\r\n    // Filter selected rows where 'To-Be child connected' is not \"-\"\r\n    const selectedRows = selectedTableRows.filter(\r\n      (row) => row[\"To-Be child connected\"] !== \"-\"\r\n    );\r\n\r\n    if (selectedRows.length === 0) {\r\n      showErrorToast(MSG_NO_REPLACE);\r\n      return;\r\n    }\r\n\r\n    // Map selectedRows to their corresponding parent objects\r\n    const selectedParents = selectedRows.map((row) => {\r\n      return allParents.find(\r\n        (parent) => parent[\"Dropped Revision ID\"] === row[\"Dropped Revision ID\"]\r\n      );\r\n    });\r\n\r\n    // Check if any matching parent is not found\r\n    if (selectedParents.some((parent) => !parent)) {\r\n      showErrorToast(\"Could not find all corresponding parent details.\");\r\n      return;\r\n    }\r\n\r\n    const userEmail = await getUserEmail();\r\n    if (!userEmail) {\r\n      throw new Error(\"User email not found.\");\r\n    }\r\n\r\n    const droppedData = droppedObjectData.cardData;\r\n\r\n    // Call the replaceRevisions function from useRevisions hook\r\n    const result = await replaceRevisions(\r\n      selectedParents,\r\n      droppedData,\r\n      userEmail\r\n    );\r\n    \r\n\r\n    if (result.success) {\r\n      // Handle success (e.g., show a success message, refetch data, etc.)\r\n    } else {\r\n      // Handle error (e.g., show an error message)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex cta-absolute\">\r\n      <CustomButton\r\n        variant=\"outline-secondary\"\r\n        className=\"m-2\"\r\n        size=\"lg\"\r\n        text=\"Replace\"\r\n        onClick={handleReplace}\r\n      />\r\n      {/* <WidgetLifecycle /> */}\r\n      \r\n\r\n      {/* <CustomButton\r\n        variant=\"outline-secondary\"\r\n        className=\"m-2\"\r\n        size=\"lg\"\r\n        text=\" Select items in my Collaborative Space\"\r\n        // onClick={\"\"}\r\n      /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RevisionFloatToolbarNativeCta;\r\n","// utils/getUserEmail.js\r\nimport { loadPlatformAPI } from \"./helpers\"; \r\n\r\nexport default async function getUserEmail() {\r\n  try {\r\n    const PlatformAPI = await loadPlatformAPI();\r\n    const user = await PlatformAPI.getUser();\r\n\r\n    return user.email;\r\n  } catch (error) {\r\n    console.error(\"Error getting user email:\", error);\r\n    return null; // Or throw the error, depending on how you want to handle it\r\n  }\r\n}","import React, {\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n  useCallback,\r\n} from \"react\";\r\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport { getCardData, getTableData, tableColumns } from \"./dataHelpers\";\r\nimport RevisionFloatToolbarNativeCta from \"./revisionFloatToolbarNativeCta\";\r\n\r\nconst RevisionFloat = () => {\r\n  const { initializeDroppableArea, loading } = useDroppableArea();\r\n  const tableKey = useRef(0); // ✅ Use useRef instead of useState\r\n  const dispatch = useDispatch();\r\n\r\n  console.log(\"[RevisionFloat] 🎯 Component Rendered\");\r\n  // ✅ Use shallowEqual to prevent unnecessary re-renders\r\n  const { cardData, parentDetails, isDropped, initialDraggedData } =\r\n    useSelector(\r\n      (state) => ({\r\n        cardData: state.droppedObject.droppedObjectData.cardData,\r\n        parentDetails: state.droppedObject.droppedObjectData.parentDetails,\r\n        isDropped: state.droppedObject.isDropped,\r\n        initialDraggedData:\r\n          state.droppedObject.droppedObjectData.initialDraggedData,\r\n      }),\r\n      shallowEqual // ✅ Ensures Redux only re-renders when values actually change\r\n    );\r\n  console.log(\"[RevisionFloat] 🏪 Redux State - cardData:\", cardData);\r\n  console.log(\"[RevisionFloat] 🏪 Redux State - parentDetails:\", parentDetails);\r\n\r\n  // ✅ Ensure droppable area is only initialized **once**\r\n  const hasInitializedDroppable = useRef(false);\r\n  useEffect(() => {\r\n    if (!isDropped && !hasInitializedDroppable.current) {\r\n      console.log(\"[RevisionFloat] 🔄 Initializing droppable area...\");\r\n      initializeDroppableArea();\r\n      hasInitializedDroppable.current = true; // ✅ Ensure it runs only once\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // ✅ Memoize tableData (Only re-run if parentDetails change)\r\n  const optimizedTableData = useMemo(\r\n    () => getTableData(parentDetails, cardData),\r\n    [parentDetails, cardData]\r\n  );\r\n\r\n  // ✅ Prevent unnecessary re-renders by checking for data changes\r\n  useEffect(() => {\r\n    if (optimizedTableData.length > 0) {\r\n      console.log(\r\n        \"[RevisionFloat] 📊 optimizedTableData Updated:\",\r\n        optimizedTableData\r\n      );\r\n    }\r\n  }, [optimizedTableData]);\r\n\r\n  // ✅ Memoize cardData (Avoid recalculations unless cardData changes)\r\n  const optimizedCardData = useMemo(() => getCardData(cardData), [cardData]);\r\n\r\n  // ✅ Reset state only when needed\r\n  const handleHomeClick = useCallback(() => {\r\n    console.log(\r\n      \"[handleHomeClick] 🏠 Home icon clicked. Resetting droppable area...\"\r\n    );\r\n\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[handleHomeClick] 🚫 Already reset. Skipping unnecessary updates.\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    // ✅ Only reinitialize if necessary\r\n    if (!initialDraggedData.length) {\r\n      console.log(\"[handleHomeClick] 🔄 Reinitializing droppable area...\");\r\n      initializeDroppableArea();\r\n    }\r\n\r\n    // ✅ Reset Redux state only if needed\r\n    dispatch(setIsDropped(false));\r\n\r\n    if (cardData || parentDetails.length || initialDraggedData.length) {\r\n      console.log(\"[handleHomeClick] 🗑 Dispatching reset action...\");\r\n      dispatch(\r\n        setDroppedObjectData({\r\n          cardData: {},\r\n          parentDetails: [],\r\n          initialDraggedData: [],\r\n        })\r\n      );\r\n    } else {\r\n      console.log(\r\n        \"[handleHomeClick] 🚫 State already cleared. Skipping dispatch.\"\r\n      );\r\n    }\r\n\r\n    console.log(\"[handleHomeClick] ✅ Reset complete.\");\r\n  }, [\r\n    dispatch,\r\n    initializeDroppableArea,\r\n    isDropped,\r\n    initialDraggedData,\r\n    cardData,\r\n    parentDetails,\r\n  ]);\r\n\r\n  // ✅ Memoize filtered columns\r\n  const filteredColumns = useMemo(() => {\r\n    if (cardData?.Type === \"Document\") {\r\n      return tableColumns;\r\n    } else {\r\n      return tableColumns.filter(\r\n        (column) => column.accessorKey !== \"relationship\"\r\n      );\r\n    }\r\n  }, [cardData]);\r\n  console.log(\"[RevisionFloat] ✅ Component Updated\");\r\n\r\n  return (\r\n    <>\r\n      {!isDropped && !loading && <DragAndDropComponent />}\r\n      {loading && <Loader />}\r\n      {isDropped && (\r\n        <>\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex\">\r\n              <div className=\"p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {optimizedCardData && (\r\n                <CardWithDragAndDrop data={optimizedCardData} />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {optimizedTableData.length > 0 ? (\r\n            <div className=\"wrapper-cta\">\r\n              <RevisionFloatToolbarNativeCta />\r\n              <ReusableTable\r\n                key={tableKey.current}\r\n                data={optimizedTableData}\r\n                columns={filteredColumns}\r\n                widgetType=\"Revision_FLoat_Widget\"\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div className=\"no-data-banner\">No Parent object(s) found</div>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RevisionFloat;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport RevisionFloat from \"./pages/revisionFloat/revisionFloat\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\n// import WidgetLifecycle from \"./WidgetLifecycle-munish\";\r\n\r\n// Connect to the WebSocket server\r\n// const socket = io(\"http://localhost:9090\");\r\n\r\n// socket.on(\"connect\", () => {\r\n//   console.log(\"Connected to Dev Server ✅\");\r\n// });\r\n\r\n// socket.on(\"filech\", () => {\r\n//   console.log(\"File Changed. Reloading...\");\r\n//   window.location.reload();\r\n// });\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      {/* <WidgetLifecycle> */}\r\n        <RevisionFloat />\r\n      {/* </WidgetLifecycle> */}\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\nexport default function () {\r\n  console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      console.log(\r\n        \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      );\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n  // When the widget fires the onRefresh event, reload the page.\r\n  // window.widget.addEvent(\"onRefresh\", () => {\r\n  //   console.log(\"[index.js] onRefresh event fired. Reloading page.\");\r\n  //   // window.location.reload();\r\n\r\n  // });\r\n\r\n  // Log a message when the widget's preferences have been edited.\r\n  // window.widget.addEvent(\"endEdit\", () => {\r\n  //   console.log(\"Preferences have been edited\");\r\n  // });\r\n}\r\n"],"names":["CheckmarkCell","_jsx","FontAwesomeIcon","icon","faCheck","className","CrossmarkCell","faXmark","tableColumns","accessorKey","header","columnPinning","cell","_ref","getValue","RevisionFloatToolbarNativeCta","replaceRevisions","useRevisions","showErrorToast","useToast","droppedObjectData","useSelector","state","droppedObject","selectedTableRows","children","CustomButton","variant","size","text","onClick","async","_droppedObjectData$pa","length","MSG_NO_ROWS","allParents","parentDetails","data","selectedRows","filter","row","MSG_NO_REPLACE","selectedParents","map","find","parent","some","userEmail","PlatformAPI","loadPlatformAPI","getUser","email","error","console","getUserEmail","Error","droppedData","cardData","success","RevisionFloat","initializeDroppableArea","loading","useDroppableArea","tableKey","useRef","dispatch","useDispatch","log","isDropped","initialDraggedData","shallowEqual","hasInitializedDroppable","useEffect","current","optimizedTableData","useMemo","getTableData","Array","isArray","_objectSpread","EIN","Title","Description","Type","Revision","connectedChildRev","toBeChildRevConnected","State","Owner","Collabspace","relationship","warn","optimizedCardData","title","type","owner","imageURL","getCardData","handleHomeClick","useCallback","setIsDropped","setDroppedObjectData","filteredColumns","column","_jsxs","_Fragment","DragAndDropComponent","Loader","Image","src","alt","CardWithDragAndDrop","ReusableTable","columns","widgetType","root","window","widget","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","rootElement","body","querySelector","document","getElementById","createElement","id","appendChild","ReactDOM","render","Provider","store","ToastContainer","start"],"sourceRoot":""}